SUBROUTINE W_SERVICE.LOGIN(msgPayload, responseCode, responseMessage)
** INFORMATION ****************************************************************
*   Routine Name : W_SERVICE.LOGIN
*           Type : SUBROUTINE
*         Params : msgPayload, responseCode, responseMessage
*            Loc : BP
** AUDIT **********************************************************************
*   Info Updated : 20210411 at 16.25.52 in MWT-QM-DEV by matttownsend
*                : on silicon.local (Mac)
*******************************************************************************

$INCLUDE BP I_HTTP.H
$INCLUDE BP F_WEB.SESSIONS.H
$INCLUDE BP F_WEB.CREDENTIALS.H
$INCLUDE BP F_WEB.CREDENTIALS.IDX.H

   PROCESS.NAME = SYSTEM(45)
   wct_Properties = "wct_connect"
   DEBUGIT = @FALSE

   IF DEBUGIT THEN CALL U_CRT.INFO("msgPayload", msgPayload)
   IF DEBUGIT THEN CALL U_CRT.INFO("responseCode", responseCode)
   IF DEBUGIT THEN CALL U_CRT.INFO("responseMessage", responseMessage)

   FV.WEB.CREDENTIALS = "" ; CALL U_IO.OPENFILE(W$CRED.FILENAME, FV.WEB.CREDENTIALS, @TRUE, "")
   FV.WEB.CREDENTIALS.IDX = "" ; CALL U_IO.OPENFILE(W$CRED_IDX.FILENAME, FV.WEB.CREDENTIALS.IDX, @TRUE, "")

   username = "" ; CALL W_BUNDLE.GET(msgPayload, "username", username) ; IF DEBUGIT THEN CALL U_CRT.INFO("username", username)
   password = "" ; CALL W_BUNDLE.GET(msgPayload, "password", password) ; IF DEBUGIT THEN CALL U_CRT.INFO("password", password)
   applicationToken = "" ; CALL W_BUNDLE.GET(msgPayload, "appToken", applicationToken) ; IF DEBUGIT THEN CALL U_CRT.INFO("applicationToken", applicationToken)
   ipUser = "" ; CALL W_BUNDLE.GET(msgPayload, "ipUser", ipUser) ; IF DEBUGIT THEN CALL U_CRT.INFO("ipUser", ipUser)
   hostUser = "" ; CALL W_BUNDLE.GET(msgPayload, "hostUser", hostUser) ; IF DEBUGIT THEN CALL U_CRT.INFO("hostUser", hostUser)
   ipWebServer = "" ; CALL W_BUNDLE.GET(msgPayload, "ipWebServer", ipWebServer) ; IF DEBUGIT THEN CALL U_CRT.INFO("ipWebServer", ipWebServer)
   hostWebServer = "" ; CALL W_BUNDLE.GET(msgPayload, "hostWebServer", hostWebServer) ; IF DEBUGIT THEN CALL U_CRT.INFO("hostWebServer", hostWebServer)
   ID.WEB.CREDENTIALS = ""

   sessionTokenLife = 0 ; CALL U_IO.GET.PROPERTY("wct_connect", "sessionTokenLife", sessionTokenLife)

   STOP.ON.ERROR = @TRUE ; FV.TOKEN="" ; R.TOKEN=""
   CALL U_IO.OPENFILE(W$TOKEN.FILE.NAME, FV.TOKEN, STOP.ON.ERROR, "")

   masterAppToken = "" ; CALL U_IO.GET.PROPERTY(wct_Properties, "appToken", masterAppToken)
   IF DEBUGIT THEN CALL U_CRT.INFO("masterAppToken", masterAppToken)

   SECURITY.VIOLATION = @FALSE

   IF applicationToken # masterAppToken THEN
      SECURITY.VIOLATION = @TRUE
      CALL U_CRT.INFO("ERROR", "TOKEN MISMATCH")
   END
   IF NOT(SECURITY.VIOLATION) THEN
      GOSUB CHECK.USERNAME
   END

   IF NOT(SECURITY.VIOLATION) THEN
      GOSUB CHECK.ACTIVE.USER
   END

   IF NOT(SECURITY.VIOLATION) THEN
      GOSUB CHECK.PASSWORD
   END

   IF NOT(SECURITY.VIOLATION) THEN
      GOSUB ISSUE.SESSION.TOKEN
   END

   IF SECURITY.VIOLATION THEN

      responseCode=RC$SECURITY.VIOLATION
      responseMessage=RC$SECURITY.VIOLATION
      CALL U_MSG.HTTP(responseMessage, "")
      CALL U_CRT.INFO(responseCode, responseMessage)

   END

   * CALL U_CRT.INFO("responseCode", responseCode)
   * CALL U_CRT.INFO("responseMessage", responseMessage)
   IF DEBUGIT THEN CALL U_CRT.INFO(responseCode, responseMessage)

   RETURN


ISSUE.SESSION.TOKEN:
   R.TOKEN<W$TOKEN.APP.TOKEN> = masterAppToken
   R.TOKEN<W$TOKEN.CREATE.DATE> = DATE()
   R.TOKEN<W$TOKEN.CREATE.TIME> = TIME()
   R.TOKEN<W$TOKEN.UNIQUE.ID> = ID.WEB.CREDENTIALS
   R.TOKEN<W$TOKEN.USERNAME> = username
   R.TOKEN<W$TOKEN.PASSWORD> = password
   R.TOKEN<W$TOKEN.USER.IP> = ipUser
   R.TOKEN<W$TOKEN.USER.HOST> = hostUser
   R.TOKEN<W$TOKEN.WS.IP> = ipWebServer
   R.TOKEN<W$TOKEN.WS.HOST> = hostWebServer
   IP4.ADDRESS = "" ; CALL U_GET.IP(IP4.ADDRESS)
   R.TOKEN<W$TOKEN.APP.IP> = IP4.ADDRESS
   R.TOKEN<W$TOKEN.APP.HOST> = SYSTEM(1015)
   R.TOKEN<W$TOKEN.ISSUED> = EPOCH()
   R.TOKEN<W$TOKEN.EXPIRY> = EPOCH() + sessionTokenLife
   R.TOKEN<W$TOKEN.ROLE> = USER.ROLE
   R.TOKEN<W$TOKEN.BRAND> = USER.BRAND

   sessionToken = "" ; CALL U_GEN.TOKEN(sessionToken)

   R.TOKEN<W$TOKEN.SESSION.TOKEN> = sessionToken

   ID.TOKEN = sessionToken
   CALL U_IO.WRITE(FV.TOKEN, ID.TOKEN, R.TOKEN, STOP.ON.ERROR, ERROR.TEXT)

   responseCode=RC$OK
   responseMessage=sessionToken:@AM:ID.WEB.CREDENTIALS:@AM:"/":USER.ROLE:@AM:USER.KNOWNAS:@AM:USER.BRAND
   CALL U_CRT.INFO("LOGIN", "SUCCESS")
   RETURN

CHECK.USERNAME:
   ID.WEB.CREDENTIALS.IDX = username ; R.WEB.CREDENTIALS.IDX = ""
   CALL U_IO.READ(FV.WEB.CREDENTIALS.IDX, ID.WEB.CREDENTIALS.IDX, R.WEB.CREDENTIALS.IDX, @FALSE, "")
   IF R.WEB.CREDENTIALS.IDX<W$CRED_IDX.ID> = "" THEN
      SECURITY.VIOLATION = @TRUE
      CALL U_CRT.INFO("ERROR", "NO CREDENTIALS INDEX")
   END ELSE
      ID.WEB.CREDENTIALS = R.WEB.CREDENTIALS.IDX<W$CRED_IDX.ID>
   END

   RETURN

CHECK.ACTIVE.USER:
   * ID.WEB.CREDENTIALS SHOULD ALREADY BE SET
   R.WEB.CREDENTIALS = ""
   CALL U_IO.READ(FV.WEB.CREDENTIALS, ID.WEB.CREDENTIALS, R.WEB.CREDENTIALS, @FALSE, "")
   IF R.WEB.CREDENTIALS = "" THEN
      CALL U_CRT.INFO("ERROR", "NO CREDENTIALS ":DQUOTE(ID.WEB.CREDENTIALS))
      SECURITY.VIOLATION = @TRUE
   END

   IF NOT(SECURITY.VIOLATION) THEN
      * DOUBLE CHECK USER (IDX & THIS SHOUDL MATCH IF NOT SEC VIOL)

      IF ID.WEB.CREDENTIALS.IDX # R.WEB.CREDENTIALS<W$CRED.USERNAME> THEN
         SECURITY.VIOLATION = @TRUE
         CALL U_CRT.INFO("ERROR", "INDEX ID & USERNAME MISMATCH")
      END

   END

   IF NOT(SECURITY.VIOLATION) THEN
      * CHECK THE EXPIRY HASNT BEEN REMOED (I.E. THE USER IS BLOCKED)
      IF R.WEB.CREDENTIALS<W$CRED.EXPIRY> = "" THEN
         SECURITY.VIOLATION = @TRUE
         CALL U_CRT.INFO("ERROR", "CREDENTIALS BLOCKED")

      END
   END

   IF NOT(SECURITY.VIOLATION) THEN
      * CHECK THE PASSWORD HAS EXPIRED
      IF EPOCH() > R.WEB.CREDENTIALS<W$CRED.EXPIRY> THEN
         SECURITY.VIOLATION = @TRUE
         CALL U_CRT.INFO("ERROR", "PASSWORD EXPIRED")

      END
   END

   IF NOT(SECURITY.VIOLATION) THEN
      USER.ROLE = R.WEB.CREDENTIALS<W$CRED.ROLE>
      USER.BRAND = R.WEB.CREDENTIALS<W$CRED.BRAND>
      IF USER.ROLE = "" THEN USER.ROLE = "default"
      IF USER.BRAND = "" THEN USER.BRAND = "default"
      USER.KNOWNAS = R.WEB.CREDENTIALS<W$CRED.KNOWNAS>
      IF USER.KNOWNAS = "" THEN USER.KNOWNAS = R.WEB.CREDENTIALS<W$CRED.FIRSTNAME>
      IF USER.KNOWNAS = "" THEN USER.KNOWNAS = ID.WEB.CREDENTIALS.IDX
   END

   RETURN

CHECK.PASSWORD:
   * ID.WEB.CREDENTIALS SHOULD ALREADY BE SET
   * R.WEB.CREDENTIALS SHOULD ALREADY BE SET
** CURRENTLY DO NOTHING, WHY, I DONT WANT TO DO ANYTHING ;-)
   RETURN
END
