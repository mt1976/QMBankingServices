SUBROUTINE SIENA.REALISEDRATE.HELPER(processName, indexID)
** INFORMATION ****************************************************************
*   Routine Name : SIENA.REALISEDRATE.HELPER
*           Type : SUBROUTINE
*         Params : processName, indexID
*            Loc : BP
** AUDIT **********************************************************************
*   Info Updated : 20210228 at 16.21.20 in DEV by root
*                : on mercury.local (Mac)
*******************************************************************************

$INCLUDE BP F_UTIL.TRANSLATE.H
$INCLUDE BP I_RATECSV.H
$INSERT BP I_UTIL.H

* INITIALISE
   processName = "SIENA.REALISEDRATE.HELPER"
   processorName = "realisedrate"

   CALL U_START(processName)

   FN.SIENA.STAGING = "SIENA.STAGING" ; FV.SIENA.STAGING = ""
   CALL U_IO.OPENFILE(FN.SIENA.STAGING, FV.SIENA.STAGING, STOP.ON.ERROR, ERROR.TEXT)

* Setup some temp locations for input data

   ERROR.TEXT = ""; STOP.ON.ERROR = @TRUE ; VERBOSE = @TRUE

* OPEN FILES
   URI.LIST = "" ; NO.URIS = ""

   sourceID = "siena_":processorName:"_idxs"

* get uriHeader, rateMask

   CALL U_IO.GET.PROPERTY(sourceID, "uriHeader", uriHeader)
   CALL U_IO.GET.PROPERTY(sourceID, "rateMask", rateMask)
   CALL U_IO.GET.PROPERTY(sourceID, "dateMask", dateMask)


* calc startDate & endDate
   startDate = OCONV(DATE()-2, dateMask)
   endDate = OCONV(DATE()-1, dateMask)

* get Process List

   CALL U_IO.GET.LIST(sourceID, indexID, URI.LIST, NO.URIS)
   URI.LIST = CHANGE(URI.LIST, U$SEP.CFG.DATA, @VM)
   listURI=1;listCCY=2;listTenor=3
   FOR thisURI.POS = 1 TO NO.URIS
      thisURI = URI.LIST<thisURI.POS, listURI>
      CALL U_WILDCARD.SUBSTITUTE("startDate", startDate, thisURI)
      CALL U_WILDCARD.SUBSTITUTE("endDate", endDate, thisURI)
      thisCCY = URI.LIST<thisURI.POS, listCCY>
      thisTenor = URI.LIST<thisURI.POS, listTenor>
      GOSUB PROCESS.URI
   NEXT thisURI.POS

   CALL U_CRT.INFO("PROCESSING", "COMPLETE")
   CALL U_STOP(processName)

   RETURN


PROCESS.URI:
   CALL U_CRT.INFO("URI", thisURI)
   CALL U_CRT.INFO("HEADER", uriHeader)
   resultWget = ""
   * CALL U_OS.WGET(thisURI, @TRUE, resultWget, uriHeader)
   CALL U_OS.CURL(thisURI, @TRUE, resultWget, "")
   IF resultWget = "" THEN
      CALL U_CRT.INFO("RESPONSE", "EMPTY")
   END ELSE
      CALL U_CRT.INFO("RESPONSE", "RETURNED")
      resultWget = CHANGE(resultWget, @AM, "")
      CALL U_CRT.RECORD(resultWget)

      jsonResult = COLLECTION()
      jsonResult = JPARSE(resultWget)
      *CALL U_CRT.INFO("jsonResult", jsonResult)
      indexRate = jsonResult{'all_in_rate'}
      CALL U_CRT.INFO(indexID:" ":thisTenor, indexRate)

      *    searchString = "" ; searchEnd = "" ; extractPos = ""
*
*      CALL U_IO.GET.PROPERTY(sourceID, indexID:"_SearchString", searchString)
*      CALL U_IO.GET.PROPERTY(sourceID, indexID:"_SearchEnd", searchEnd)
*      CALL U_IO.GET.PROPERTY(sourceID, indexID:"_Position", extractPos)

      *    CALL U_CRT.INFO("searchString", searchString)
      *    CALL U_CRT.INFO("searchEnd", searchEnd)

*      resultWget = CHANGE(resultWget, searchString, @AM)
*      resultWget = CHANGE(resultWget, searchEnd, @AM)

*      indexRate = resultWget<extractPos>

      *  CALL U_CRT.RECORD(resultWget)
      CCY=UPCASE(thisCCY)

      CALL U_CRT.INFO("CCY", CCY)
      CALL U_CRT.INFO("TENOR", thisTenor)

      outCCY = "" ; outCCY = SPACE(3):CCY
      outTenor = "" ; extTenor = ""
      CALL U_TRANSLATE("TENOR", thisTenor, U_TRNS.MESSAGE, outTenor)
      CALL U_TRANSLATE("TENOR", thisTenor, U_TRNS.SIENA_BC, extTenor)
      CALL U_TRANSLATE("RATETYPE", indexID, U_TRNS.MESSAGE, rvType)

      outCCYTenor = rvType[1, 1]:outCCY"L#6":outTenor
      *    CALL U_CRT.INFO("outCCYTenor", outCCYTenor)

      outBuy = CONVERT('"', '', indexRate) rateMask
      outSell = CONVERT('"', '', indexRate) rateMask
      outputData = outCCYTenor:"D":outBuy:"D":outSell

      *    CALL U_CRT.INFO("outputData", outputData)

      cacheName = indexID:U$SEP.ID:extTenor:U$SEP.ID:TRIM(CCY)
      cacheValue = outBuy
      CALL SIENA.CACHE.CLEAR(cacheName)
      CALL SIENA.CACHE.UPDATE(cacheName, "", cacheValue)

      ID.SIENA.STAGING = "RV":UPCASE(indexID):U$SEP.ALT:TRIM(CCY):extTenor
      CALL U_CRT.INFO("DELETE", ID.SIENA.STAGING)
      CALL U_IO.DELETE(FV.SIENA.STAGING, ID.SIENA.STAGING, STOP.ON.ERROR, ERROR.TEXT)
      CALL U_CRT.INFO("STORE", ID.SIENA.STAGING)
      CALL U_IO.WRITE(FV.SIENA.STAGING, ID.SIENA.STAGING, outputData, STOP.ON.ERROR, ERROR.TEXT)

   END



   RETURN

END
