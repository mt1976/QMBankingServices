SUBROUTINE U_CSV.DO.HELPER(ID_UTIL.CSV.IN)
** INFORMATION ****************************************************************
* Routine Name   : U_CSV.DO.HELPER
*         Type   : PROGRAM
*         Params :
*         Loc    : UTIL.BP
** AUDIT **********************************************************************
* Info Updated   : 20200323 at 15.04.38 in MWT-QM-DEV by sales
*                : on ldn-srv-ubnt01 (Linux)
*******************************************************************************

$INCLUDE UTIL.BP I_UTIL.H
$INCLUDE UTIL.BP F_UTIL.CSV.IN.H
$INCLUDE UTIL.BP F_UTIL.CSV.OUT.H
$INCLUDE UTIL.BP F_UTIL.CSV.TRANSLATE.H

   CALL U_INITIALISE("U_CSV.DO.HELPER")
   PNM = "" ; STOP.ON.ERROR = @TRUE ; ERROR.TEXT = ""

   FN_UTIL.CSV.IN = "UTIL.CSV.IN" ; FV_UTIL.CSV.IN = ""
   CALL U_IO.OPENFILE(FN_UTIL.CSV.IN, FV_UTIL.CSV.IN, STOP.ON.ERROR, ERROR.TEXT)

   FN_UTIL.CSV.OUT = "UTIL.CSV.OUT" ; FV_UTIL.CSV.OUT = ""
   CALL U_IO.OPENFILE(FN_UTIL.CSV.OUT, FV_UTIL.CSV.OUT, STOP.ON.ERROR, ERROR.TEXT)

   FN_UTIL.CSV.TRANSLATE = "UTIL.CSV.TRANSLATE" ; FV_UTIL.CSV.TRANSLATE = ""
   CALL U_IO.OPENFILE(FN_UTIL.CSV.TRANSLATE, FV_UTIL.CSV.TRANSLATE, STOP.ON.ERROR, ERROR.TEXT)

   CALL U_CRT.INFO("PROCESSING", ID_UTIL.CSV.IN)

   LEN_CSV.FILENAME = LEN(ID_UTIL.CSV.IN)
   ID_PROCESS = ID_UTIL.CSV.IN[1,LEN_CSV.FILENAME-4]
   ID_UTIL.CSV.TRANSLATE = ID_PROCESS:".translate"

   CALL U_CRT.INFO("PROCESS NAME", ID_PROCESS)
   CALL U_CRT.INFO("TRANSLATE NAME", ID_UTIL.CSV.TRANSLATE)

   R_UTIL.CSV.TRANSLATE = ""
   CALL U_IO.READ(FV_UTIL.CSV.TRANSLATE, ID_UTIL.CSV.TRANSLATE, R_UTIL.CSV.TRANSLATE, @FALSE, "")

   R_UTIL.CSV.IN = ""
   CALL U_IO.READ(FV_UTIL.CSV.IN, ID_UTIL.CSV.IN, R_UTIL.CSV.IN, @FALSE, "")

   IF R_UTIL.CSV.TRANSLATE = "" THEN
     CALL U_CRT.INFO("CREATE", FN_UTIL.CSV.TRANSLATE:"-":ID_UTIL.CSV.TRANSLATE)
     CALL U_IO.WRITE(FV_UTIL.CSV.TRANSLATE, ID_UTIL.CSV.TRANSLATE, "", @FALSE, "")
   END ELSE
     GOSUB PROCESS.IT
   END

RETURN


PROCESS.IT:

  CALL U_CRT.RECORD(R_UTIL.CSV.IN)
  CALL U_CRT.RECORD(R_UTIL.CSV.TRANSLATE)

  NO_TRANSLATIONS = DCOUNT(R_UTIL.CSV.TRANSLATE,@AM)
  CALL U_CRT.INFO("NO TRANSLATIONS", NO_TRANSLATIONS)

  NO_UTIL.CSV.IN.ROWS = DCOUNT(R_UTIL.CSV.IN,@AM)

  R_UTIL.CSV.OUT = ""

  FIRST.TIME = @TRUE

  FOR I = 2 TO NO_UTIL.CSV.IN.ROWS

    PROCESS.ROW = CHANGE(R_UTIL.CSV.IN<I>,",",@AM)
    CALL U_CRT.RECORD(PROCESS.ROW)
    R_UTIL.CSV.OUT = ""
    FOR THIS.TX = 1 TO NO_TRANSLATIONS

      EXTRACT.FIELD = R_UTIL.CSV.TRANSLATE<THIS.TX>

      R_UTIL.CSV.OUT<THIS.TX>:=TRIM(PROCESS.ROW<EXTRACT.FIELD>)

      IF FIRST.TIME THEN

        CALL U_CRT.INFO("TRANSLATE", EXTRACT.FIELD:'->':THIS.TX)

      END

    NEXT THIS.TX

    SEQ = FMT(I-1,'6"0"R')

    ID_UTIL.CSV.OUT = ID_PROCESS:U_TRUNC:SEQ

    CALL U_CRT.INFO("OUTPUT", ID_UTIL.CSV.OUT)
    CALL U_CRT.RECORD(R_UTIL.CSV.OUT)


    R_UTIL.CSV.OUT<U_CSVOUT_SOURCE.FILE>=ID_PROCESS
    R_UTIL.CSV.OUT<U_CSVOUT_SOURCE.ROW>=I
    R_UTIL.CSV.OUT<U_CSVOUT_IMPORT.DATE>=OCONV(DATE(),"D4/")

    CALL U_IO.WRITE(FV_UTIL.CSV.OUT, ID_UTIL.CSV.OUT, R_UTIL.CSV.OUT, @FALSE, "")

    FIRST.TIME = @FALSE

  NEXT I

RETURN

END
