SUBROUTINE U_CSV.DO.HELPER(ID_UTIL.CSV.IN)
** INFORMATION ****************************************************************
* Routine Name   : U_CSV.DO.HELPER
*         Type   : SUBROUTINE
*         Params : ID_UTIL.CSV.IN
*         Loc    : UTIL.BP
** AUDIT **********************************************************************
* Info Updated   : 20200821 at 12.55.08 in DEV by root
*                : on mercury.local (Mac)
*******************************************************************************

$INCLUDE UTIL.BP I_UTIL.H
$INCLUDE UTIL.BP F_UTIL.CSV.IN.H
$INCLUDE UTIL.BP F_UTIL.CSV.OUTPUT.H
$INCLUDE UTIL.BP F_UTIL.CSV.TRANSLATE.H

   CALL U_INITIALISE("U_CSV.DO.HELPER")
   PNM = "" ; STOP.ON.ERROR = @TRUE ; ERROR.TEXT = ""

   FN_UTIL.CSV.IN = "UTIL.CSV.IN" ; FV_UTIL.CSV.IN = ""
   CALL U_IO.OPENFILE(FN_UTIL.CSV.IN, FV_UTIL.CSV.IN, STOP.ON.ERROR, ERROR.TEXT)

   FN_UTIL.CSV.OUTPUT = "UTIL.CSV.OUTPUT" ; FV_UTIL.CSV.OUTPUT = ""
   CALL U_IO.OPENFILE(FN_UTIL.CSV.OUTPUT, FV_UTIL.CSV.OUTPUT, STOP.ON.ERROR, ERROR.TEXT)

   FN_UTIL.CSV.TRANSLATE = "UTIL.CSV.TRANSLATE" ; FV_UTIL.CSV.TRANSLATE = ""
   CALL U_IO.OPENFILE(FN_UTIL.CSV.TRANSLATE, FV_UTIL.CSV.TRANSLATE, STOP.ON.ERROR, ERROR.TEXT)

   CALL U_CRT.INFO("PROCESSING", ID_UTIL.CSV.IN)

   LEN_CSV.FILENAME = LEN(ID_UTIL.CSV.IN)
   ID_PROCESS = ID_UTIL.CSV.IN[1, LEN_CSV.FILENAME-4]
   ID_UTIL.CSV.TRANSLATE = ID_PROCESS:".translate"

   CALL U_CRT.INFO("PROCESS NAME", ID_PROCESS)
   CALL U_CRT.INFO("TRANSLATE NAME", ID_UTIL.CSV.TRANSLATE)

   R_UTIL.CSV.TRANSLATE = ""
   CALL U_IO.READ(FV_UTIL.CSV.TRANSLATE, ID_UTIL.CSV.TRANSLATE, R_UTIL.CSV.TRANSLATE, @FALSE, "")

   R_UTIL.CSV.IN = ""
   CALL U_IO.READ(FV_UTIL.CSV.IN, ID_UTIL.CSV.IN, R_UTIL.CSV.IN, @FALSE, "")

   IF R_UTIL.CSV.TRANSLATE = "" THEN
      CALL U_CRT.INFO("CREATE", FN_UTIL.CSV.TRANSLATE:"-":ID_UTIL.CSV.TRANSLATE)
      CALL U_IO.WRITE(FV_UTIL.CSV.TRANSLATE, ID_UTIL.CSV.TRANSLATE, "", @FALSE, "")
   END ELSE
      GOSUB PROCESS.IT
   END

   RETURN


PROCESS.IT:

   * CALL U_CRT.RECORD(R_UTIL.CSV.IN)
   * CALL U_CRT.RECORD(R_UTIL.CSV.TRANSLATE)

   NO_TRANSLATIONS = DCOUNT(R_UTIL.CSV.TRANSLATE, @AM)
   CALL U_CRT.INFO("NO TRANSLATIONS", NO_TRANSLATIONS)

   NO_UTIL.CSV.IN.ROWS = DCOUNT(R_UTIL.CSV.IN, @AM)

   R_UTIL.CSV.OUTPUT = ""

   FIRST.TIME = @TRUE

   FOR I = 2 TO NO_UTIL.CSV.IN.ROWS

      PROCESS.ROW = CHANGE(TRIM(R_UTIL.CSV.IN<I>, "|", "T"), "|", @AM)
      * CALL U_CRT.RECORD(PROCESS.ROW)
      R_UTIL.CSV.OUTPUT = ""
      FOR THIS.TX = 1 TO NO_TRANSLATIONS

         EXTRACT.FIELD = R_UTIL.CSV.TRANSLATE<THIS.TX>

         EXTRACT.VALUE = TRIM(CONVERT('"', "", PROCESS.ROW<EXTRACT.FIELD>))

         R_UTIL.CSV.OUTPUT <THIS.TX>:=EXTRACT.VALUE

         IF FIRST.TIME THEN
            IF EXTRACT.FIELD<>"" THEN
               CALL U_CRT.INFO("TRANSLATE", EXTRACT.FIELD:'->':THIS.TX)
            END
         END

      NEXT THIS.TX

      SEQ = FMT(I-1, '6"0"R')

      ID_UTIL.CSV.OUTPUT = ID_PROCESS:U_TRUNC:SEQ

      *CALL U_CRT.INFO("OUTPUT", ID_UTIL.CSV.OUTPUT )
      *CALL U_CRT.RECORD(R_UTIL.CSV.OUTPUT )

* AUDIT INFORMATION

      R_UTIL.CSV.OUTPUT <U_CSVOUT_SOURCE.FILE>=ID_PROCESS
      R_UTIL.CSV.OUTPUT <U_CSVOUT_SOURCE.ROW>=I
      R_UTIL.CSV.OUTPUT <U_CSVOUT_IMPORT.DATE>=OCONV(DATE(), "D4/")

* BUILD AUTOGEN FIELDS

      GOSUB AUTOGEN.UPPER

      GOSUB AUTOGEN.SOUNDEX

      GOSUB DOMAIN.NAME

      CALL U_IO.WRITE(FV_UTIL.CSV.OUTPUT, ID_UTIL.CSV.OUTPUT, R_UTIL.CSV.OUTPUT, @FALSE, "")

      FIRST.TIME = @FALSE

   NEXT I

   RETURN



DOMAIN.NAME:
   IN.EMAIL = R_UTIL.CSV.OUTPUT<U_CSVOUT_EMAIL>
   IN.WEB = R_UTIL.CSV.OUTPUT<U_CSVOUT_WEBSITE>
   OUT.DOMAIN = ""

   IF IN.EMAIL <> "" THEN
      TMP = TRIM(CONVERT("@", @AM, IN.EMAIL))
      OUT.DOMAIN = TMP<2>
   END

   IF OUT.DOMAIN = "" AND IN.WEB <> "" THEN
      TMP = IN.WEB

      RMV.PREFIX = "https://"; GOSUB REMOVE.PREFIX
      RMV.PREFIX = "http://" ; GOSUB REMOVE.PREFIX
      RMV.PREFIX = "http://"; GOSUB REMOVE.PREFIX

      RMV.PREFIX = "www."; GOSUB REMOVE.PREFIX
      RMV.PREFIX = "/www."; GOSUB REMOVE.PREFIX


      OUT.DOMAIN = TMP
   END

   R_UTIL.CSV.OUTPUT<U_CSVOUT_DOMAIN> = OUT.DOMAIN
   RETURN

REMOVE.PREFIX:
   IF RMV.PREFIX <> "" THEN
      PREF.LEN = LEN(RMV.PREFIX)

      CHK.VAL = TMP[1, PREF.LEN]
      IF UPCASE(CHK.VAL) = UPCASE(RMV.PREFIX) THEN
         TMP.LEN = LEN(TMP)
         TMP.OUT = TMP[PREF.LEN, 99]
      END ELSE
         TMP.OUT = TMP
      END
      TMP = TMP.OUT
   END

   RETURN


AUTOGEN.UPPER:

   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.FULLNAME> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_FULLNAME>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.FORENAME> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_FORENAME>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.MIDNAME> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_MIDNAME>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.SURNAME> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_SURNAME>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.TITLE> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_TITLE>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.COMPANY> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_COMPANY>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.ENGAGEMENT> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_ENGAGEMENT>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.COUNTRY> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_COUNTRY>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.REGION> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_REGION>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.JOB.TITLE> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_JOB.TITLE>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.PARENT> = UPCASE(R_UTIL.CSV.OUTPUT <U_CSVOUT_PARENT>)

   RETURN

AUTOGEN.SOUNDEX:
   OUTPUT.VAL = ""
   CALL U_SOUNDEX(OUTPUT.VAL, R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.FULLNAME>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.FULLNAME> = OUTPUT.VAL
*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.FORENAME>    = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_FORENAME>)
*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.MIDNAME>     = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_MIDNAME>)

   OUTPUT.VAL = ""
   CALL U_SOUNDEX(OUTPUT.VAL, R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.SURNAME>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.SURNAME> = OUTPUT.VAL
*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.SURNAME>     = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_SURNAME>)

*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.TITLE>       = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_TITLE>)

*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.COMPANY>     = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_COMPANY>)
   OUTPUT.VAL = ""
   CALL U_SOUNDEX(OUTPUT.VAL, R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.COMPANY>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.COMPANY> = OUTPUT.VAL

*CALL U_CRT.INFO("TEST", DQUOTE(R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.COMPANY>):DQUOTE(R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.COMPANY>))
*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.ENGAGEMENT>  = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_ENGAGEMENT>)
*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.COUNTRY>     = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_COUNTRY>)
   OUTPUT.VAL = ""
   CALL U_SOUNDEX(OUTPUT.VAL, R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.COUNTRY>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.COUNTRY> = OUTPUT.VAL

*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.REGION>      = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_REGION>)
*R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.JOB.TITLE>   = SOUNDEX(R_UTIL.CSV.OUTPUT <U_CSVOUT_JOB.TITLE>)
   OUTPUT.VAL = ""
   CALL U_SOUNDEX(OUTPUT.VAL, R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.JOB.TITLE>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.JOB.TITLE> = OUTPUT.VAL

   OUTPUT.VAL = ""
   CALL U_SOUNDEX(OUTPUT.VAL, R_UTIL.CSV.OUTPUT <U_CSVOUT_UP.PARENT>)
   R_UTIL.CSV.OUTPUT <U_CSVOUT_SDEX.PARENT> = OUTPUT.VAL


   RETURN

END
