<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>
   <title>QM Alternate Editor</title>
   <meta name="keywords" content="AE" />


   <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
</head>


<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">

<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#649CCC">
  <tr valign="middle">
    <td align="left">
      <p><span style="font-size: 14pt; color: #FFFFFF"><b>AE 3.02 - The Alternate Editor</b></span></p>
    </td>
    <td align="right">
     <span style="font-size: 11pt">
<!--
     <a href="_.htm"><img src="top.gif" border=0 alt="Top"></a>&nbsp;
     <a href="echo.htm"><img src="previous.gif" border=0 alt="Previous"></a>&nbsp;
     <a href="edit_list.htm"><img src="next.gif" border=0 alt="Next"></a>
-->
     </span>
    </td>
  </tr>
</table>

<p></p>
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">

The <b>AE</b> command enters the QM alternate editor.
<p></p>
The alternate editor is designed to be an interactive programmer's editor with a number of
 special features useful in the QM environment.
<p></p>
If the alternate editor is run with the V option it will act as a 'viewer' -
 the user can see everything, but cannot change anything.
 Specialised verbs for this can be set up by copying the VOC entry for <b>AE</b>
 and putting a "V" on line 4.
<p>&nbsp;</p>
<b><u>Format</u></b>

<p></p>

<b>AE</b> {<i>DICT</i>} {<i>file.name</i>} {<i>record.id</i>} {(options)}
<p></p>
where
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<table>
<tr><td><i>DICT</i></td> <td>indicates that records from the dictionary portion of the file are to be edited.</td></tr>
<tr><td><i>file.name</i></td> <td>is the name of the file holding the record(s) to be edited.</td></tr>
<tr><td><i>record.id</i></td> <td>is the name of the record to be edited.</td></tr>
<tr><td></td><td>Multiple record ids may be given in which case each record is edited in turn. </td></tr>
<tr><td><i>options</i></td> <td>May be within brackets or may be on line 4 of the VOC entry for the verb.</td></tr>
<tr><td></td> <td>The two types of options are concatenated.</td></tr>
<tr><td></td> <td>The presently available options are:</td></tr>

<tr><td></td><td>

<table>
<tr><td><b>B &nbsp;</b></td><td>Means that the file will be accessed in binary mode.</td></tr>
<tr><td> </td><td>That is, line feeds are not confused with attribute marks.</td></tr>
<tr><td><b>D &nbsp;</b<</td><td>Allows DATA statements in a controlling paragraph.</td></tr>
<tr><td> </td><td>That is, INPUT statements are used and Page Editing is not allowed.</td></tr>
<tr><td><b>E &nbsp;</b<</td><td>Like the option used in <b>SED</b>. This restricts the user to editing</td></tr>
<tr><td> </td><td>only the records on the command line and disallows use of XEQ.</td></tr>
<tr><td><b>H &nbsp;</b></td><td>Means the Page Editor displays the code for the character under the</td></tr>
<tr><td> </td><td>cursor in hexadecimal, rather than decimal, in brackets on the top line.</td></tr>
<tr><td><b>V &nbsp;</b></td><td>Allows the editor to view items safely as a flexible alternative</td></tr>
<tr><td> </td><td>to the previously hard-coded BROWSE, LOOK, and VIEW "verbs".</td></tr>
<tr><td><b>X &nbsp;</b></td><td>Disallows the use of XEQ within the editor.</td></tr>
</table>

</table>
</p>

<p></p>
If either the <i>file.id</i> or <i>record.id</i> is not specified, then they will be prompted for.
 If a select list is active, this will be assumed to be a set of <i>record.id</i>s to be edited.
<p></p>
If <i>record.id</i>s are specified on the command line and a select list is active,
 the select list will be ignored, and you will be informed of this.
<p></p>
A <i>record.id</i> of * on the command line will cause <b>AE</b> to select all records of the file and
 edit each in turn. If the file contains a lot of records, this may cause a noticable delay.
<p></p>
The alternate editor maintains an update lock on the record that is being edited.
The lock <u>can</u> be released, but this means the record cannot be updated subsequently in the edit session.
<p></p>
When a source code record is moved from a Windows system to a UNIX system, carriage returns (char(13)) are
'left' in the record. That is, char(13):char(10) pairs are changed into char(13):char(254) pairs. The
alternate editor will delete all char(13) characters unless the binary mode '<b>B</b>' above is
specifically chosen.
<p>&nbsp;</p>
<b><u>Overview</u></b>
<p></p>
The alternate editor is intended to operate as an interactive editor.
 It normally takes commands <u>only</u> from the keyboard.
 In order to allow this editor to take commands from DATA statements in a paragraph,
 it must be called with the D option in brackets.
 This option means that page editing cannot be used,
 and also that the data entry is by simple input commands
 so things like arrow keys and function keys will either not work or behave unexpectedly.
<p></p>
Commands are retained in a stack similar to the TCL command processor stack.
These can be repeated or changed using 'dot' commands.
They can also be edited and executed using line editor keys.
Commands that take arguments specifying their exact function can usually be repeated
 by entering just the command itself.
<p></p>
Commands in the alternate editor have following structure:
<p></p>

<p style="margin: 0px 0px 0px 30px;">
<b>COMMAND</b>{<i>n</i>}{<i>delimiter</i>}{<i>string</i>}
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
Where these are:
</p>
<p></p>

<p style="margin: 0px 0px 0px 30px;">
<table>
<tr><td valign="top" align="right">
  <b>COMMAND&nbsp;</b></td> <td> The command itself - strictly alphabetic.</td></tr>
<tr><td valign="top" align="right">
  <i>n&nbsp;</i></td> <td> The number of lines to which the command applies.
    <br>An asterisk <b>*</b> <u>can</u> be used to signify 999999 lines,
    where the asterisk is the last character of input <b>or</b> is followed by a
    delimiter and not preceded by any digits
   (which would be assumed to be  the number of lines).
</td></tr>
<tr><td valign="top" align="right">
  <i>delimiter&nbsp;</i></td> <td> Any character which is not a letter or a number
      <u>will</u> be used to differentiate the command,
    <br>and <u>may</u> be used to interpret the command.</td></tr>
<tr><td valign="top" align="right">
  </td><td>The examples following will generally use a space as the delimiter.
    <br>A slash or backslash may be used to make things clearer.
    <br>A space as delimiter affects the interpretation of the <b>R</b> command.
</td></tr>
<tr><td valign="top" align="right">
  <i>string&nbsp;</i></td> <td> The rest of the command line.</td></tr>
</table>
</p>
<p></p>

As <b>AE</b> commands and input are entered using an embedded line editor,
 it cannot accept commands or input text that contain non-printing characters.
 Where a non-printing character is to be entered, it can be typed as ^nnn where
 nnn is the decimal value of the character.
 Alternatively, the D option may be used.
<p></p>

The alternate editor operates in three modes; edit, input, and page edit.
In edit mode, commands affect the current line (field) or a specified number of lines.
In input mode, new data is entered into the record.
 Lines are numbered from one and the line number is displayed as a number followed by a
 colon whenever lines are displayed or during input.
 The line editor command prompt is a symbol and three or more hyphens followed by a colon.
 The symbol shows the input state of the embedded line editor.
<p></p>

<p style="margin: 0px 0px 0px 30px;">
<table>
<tr><td>Symbol </td> <td> Description</td></tr>
<tr><td><b>&#62;</b></td> <td> Insert - existing text moves to accommodate new text</td></tr>
<tr><td><b>&#35;</b></td> <td> Overwrite - new text replaces existing text</td></tr>
<tr><td><b>&#42;</b></td> <td> New - Any existing text will be removed unless the user moves the cursor first.</td></tr>
<tr><td><b>&#45;</b></td> <td> There is no embedded editor because the D option is in effect.</td></tr>
</table>
</p>
<p></p>
The embedded line editor (used for edit and input modes) responds to Ctrl-W by changing the
 casing of the word under the cursor or the whole input line.
 It cycles through upper, text, and lower cases in turn.
 In page edit mode, it will change the case of the word the cursor is on,
 or the entire line if the cursor is not on a word.
 The INWORD mode/control allows you to add characters to assume as in words.
<p></p>
The Alternate Editor comes as three files.
 One is the monolithic source, which must be put in a basic program file and compiled and cataloged.
 The second is this html file, which you are reading - so presumably that's OK.
 The the third is the messages source file which must be loaded into MESSAGES by using the
 <b>LOAD.LANGUAGE</b> verb.
<p>&nbsp;</p>

<b><u>Positioning Commands</u></b>

<p></p>

The commands listed below alter the position of the current line.
 In addition, entering a blank line at the command prompt advances the current position by one line,
 displaying the newly selected line.

<p>&nbsp;</p>

<b><i>n</i></b>
<p></p>
Entering a number at the command prompt positions the current line to line <i>n</i>.
<p>&nbsp;</p>


<b>+</b><b><i>n</i></b>
<p></p>
Moves the current line position forward by <i>n</i> lines.  <i>n</i> defaults to 1.
<p>&nbsp;</p>

<b>-</b><b><i>n</i></b>
<p></p>
Moves the current line position backward by <i>n</i> lines. <i>n</i> defaults to 1.
<p>&nbsp;</p>

<b>B</b>
<p></p>
The <b>B</b> (bottom) command moves to the last line of the record.

<p>&nbsp;</p>

<b>CM</b>[<i>n</i>]/<i>pattern</i>/<b>L</b>
<p></p>
This version of the <b>CM</b> (changematch) command allows the user to search for
lines matching <i>pattern</i>. The <b>L</b> is assumed if not specifed.
The optional <i>n</i> component specifies that <i>n</i> lines starting
immediately after the current line are to be pattern matched.
Be aware that the CASE flag will influence the operation of this command.
<p>&nbsp;</p>


<b>FM</b>{<b>A</b>} {<i>string</i>}
<p></p>
The <b>FM</b> command finds Matching logic by position.
 This is a command useful in BASIC programming.
 It looks forward to a line with indenting that matches the logic of the currrent line.
 <b>FMA</b> looks for a previous line matching the logic of the current line.
 If a <i>string</i> is given, the program looks for a line
 with <i>string</i> matching the indentation of the current line.
 The <i>string</i> must be preceded by a space or other non-alphanumeric delimiter.

<p>&nbsp;</p>

<b>FL</b>{<b>A</b>}{<i>n</i>} {<i>pattern</i>}
<p></p>
The <b>FL</b> command finds Labels. This is another command useful in BASIC programming.
 It looks forward to a line with a label matching the pattern given.
 If no pattern is given, it finds the next line any label.
 The <i>pattern</i> must be preceded by a space or other non-alphanumeric delimiter.
 <b>FLA</b> looks for a previous line label matching the pattern given.
<br></br>
If a number is given, the program will show all the lines that match the criteria within the range specified.
<p>&nbsp;</p>

<b>G</b><b><i>n</i></b>
<p></p>
The <b>G<i>n</i></b> (go to) command moves to line <i>n</i>.
 This is identical to the <i>n</i> command described above.
<p>&nbsp;</p>


<b>G&lt;</b>
<p></p>
The <b>G&lt;</b> command moves to the first line of the currently defined block.
If no block is defined , it defaults to the top.
<p>&nbsp;</p>


<b>G&gt;</b>
<p></p>
The <b>G&gt;</b> command moves to the last line of the currently defined block.
If no block is defined , it defaults to the top.
<p>&nbsp;</p>


<b>L</b>{<b>A</b>}{<b>N</b>}{<b>R</b>}{<b>W</b>}{<i>n</i>}/{<i>string</i>}/{<i>range</i>}
<p></p>
The <b>L</b> (locate) command moves forward to the next line containing <i>string</i>.
The <b>A</b> (above) modifier reverses the search direction.
The <b>N</b> (not) modifier looks for a line <u>without</u> <i>string</i>.
The <b>R</b> (remark) modifier ignores non-comment comment lines.
The <b>W</b> (working) modifier ignores comment lines.
<b>R</b> and <b>W</b> modifiers are mutually exclusive, and will, if both are used,
cause an error. 
The <i>string</i> must be preceded by a space or other non-alphanumeric delimiter.
<p></p>
The range is in the form <b>n-m</b> where <b>n</b> and <b>m</b> are numbers.
 The search can be pinned to the start or end of a line or range by using
 <b>:</b> or <b>;</b> respectively as the delimiter.
 Pinning to the end is not as 'firm' as pinning to the start because it picks up short lines.
<p></p>
A logical search capability exists when the delimiter is <b>|</b> or <b>&</b> or <b>^</b>
 (alternatives <b>!</b> or <b>+</b> or <b>#</b> respectively).
The delimiter controls the logic, and this gives the ability to search for
 lines with <b>any</b> (<b>|</b> or <b>!</b>) or <b>all</b> (<b>&</b> or <b>+</b>)
 the strings specified, or with the first <b>only</b> (<b>^</b> or <b>#</b>).
 The alternatives exist so you can search for strings containing the original delimiters.
 These delimiters don't allow for range input.
<p></p>
 The <b>N</b> flag reverses the logic.
 It's a good idea to experiment for a while before assuming you know what this does.
<p></p>
some  useful usages I have found have been:
<p/>
L9999| BEGIN CASE| END CASE
<br>
L9999| LOOP| REPEAT| UNTIL| WHILE
<p></p>
The <i>string</i> may be case sensitive by default but the CASE command can be used to select case insensitive searches.
<p></p>
The optional line count, <i>n</i>, limits the search to <i>n</i> lines from the current position.
 If <i>n</i> is present, all occurrences
 (except for the <i>W</i>orking modifier)
 of <i>string</i> in the region to be searched are displayed
 and the current position is left at the end of the search region.
<p></p>
If <i>string</i> is omitted, the <i>string</i> used by the most recent <b>L</b>... command is used.
 The F3 and F4 keys can be used for forward and backward searching to the next occurrance respectively,
<p>&nbsp;</p>



<b>M</b> <i>pattern</i>
<p></p>
The M (match) command moves forward to the next line matching the <i>pattern</i>.
If the program has to add quotes to make sense of the command entered, the modified command will be shown.
<p>&nbsp;</p>


<b>S</b>{<i>n</i>}
<p></p>
The <b>S</b> (search) command on its own will display a page of up to 20 of the last <b>L</b> commands.
 If a line number <i>n</i> is given, the <i>n</i>th <b>L</b> command will
 be repeated and moved to the top of the search stack.
<p>&nbsp;</p>

<b>T</b>
<p></p>
The <b>T</b> (top) command moves to before line 1. There is no current line after this action.
 This is the place to enter <b>&LT;&GT;</b> to disestablish the defined block.
<p>&nbsp;</p>


<b><u>Displaying Text</u></b>
<p>&nbsp;</p>
<b>D</b>
<p></p>
The <b>D</b> command (display) shows the current line again without displaying the command.
 This is particularly useful after the <b>HEX</b> command.
<b>Be aware</b> that other editors can use this as a <b>DE</b>lete line command.
However, I saw no reason to have two extremely short variants of a destructive command; and
also, I wanted to be able to quickly show the current line.
<p>&nbsp;</p>

<b>HEX</b>
<p></p>
The <b>HEX</b> command displays the current line in hexadecimal characters.
 These read vertically to assist in lining them up with the standard display.
 Displaying the hexadecimal string across the screen (as the original Pick editor did)
 would have made this command essentially useless - except for trivially short strings.
 Using the <b>D</b> command immediately after HEX displays the original line
 close up under the hexadecimal characters, to be more easily understood.
<p>&nbsp;</p>

<b>L</b><i>n</i>
<p></p>

The <b>L</b><i>n</i> (list) command displays <i>n</i> lines, moving the current line forward
 to the final displayed line. It is similar to the <b>P</b> command except that <i>n</i> must be included.
 Omitting <i>n</i> results in execution of a locate command as described above.
<p>&nbsp;</p>


<b>P</b>{<i>n</i>}
<p></p>
The <b>P</b> (print) command displays <i>n</i> lines starting at the current line,
 moving the current line forward to the final displayed line.
 The value of <i>n</i> defaults to display a single page.
 There must be no space between <b>P</b> and n.
<p>&nbsp;</p>


<b>PA</b>{<i>n</i>}
<p></p>
The <b>PA</b> (print above) command displays <i>n</i> lines before the current line position.
 The value of <i>n</i> defaults to display a single page.
 There must be no space between <b>PA</b> and <i>n</i>.
 The current line position is not changed by this command.
<p>&nbsp;</p>



<b>PL</b>{<i>n</i>}
<p></p>
The <b>PL</b> (print lines) command displays <i>n</i> lines starting with the current line position.
 The value of <i>n</i> defaults to display a single page.
 There must be no space between <b>PL</b> and <i>n</i>.
 The current line position is not changed by this command.
<p>&nbsp;</p>



<b>PP</b>{<i>n</i>}
<p></p>
The <b>PP</b> (print position) command displays <i>n</i> lines surrounding the current line position.
 The value of <i>n</i> defaults to display a single page.
 There must be no space between <b>PP</b> and <i>n</i>.
 The current line position is not changed by this command.
<p>&nbsp;</p>


<b><u>Inserting Text</u></b>
<p>&nbsp;</p>

<b>CRT</b> <i>text</i>
<p></p>
The <b>CRT</b> command inserts after the current line -
<pre>
   CRT text = 'text'
</pre>
It's up to the user to ensure the result is good code.
 If a double quote or backslash is used as the delimiter,
 then that will be used as the quote marks in the new line.
<p>&nbsp;</p>

<b>DB  ON</b>|<b>OFF</b>|text
<p></p>
The <b>DB</b> command inserts after the current line -
<pre>
   DBG. = @TRUE
or
   DBG. = @FALSE
or
   DBG. = text
</pre>
Depending which term is used. <b>1</b> or <b>0</b> can be used for <b>ON</b> or <b>OFF</b> respectively.
<b>DB</b> alone inserts "DBG. = @TRUE". The usefulness of the text mode can be seen
 by considering "db @true ;* some comment".
<p></p>
This has nothing to do with the QM debugger, it is for programmatic debugging which is not so fine-grained.
<p>&nbsp;</p>

<b>DBV</b> <i>text</i>
<p></p>
The <b>DBV</b> command inserts after the current line -
<pre>
   IF DBG. THEN CRT text = 'text'
</pre>
DeBug View - similar to the <b>CRT</b> command, but for debugging.
<p>&nbsp;</p>

<b>DBW</b> <i>text</i>
<p></p>
The <b>DBW</b> command inserts after the current line -
<pre>
   IF DBG. THEN CRT 'text = ':text: ; INPUT WAIT ; IF WAIT NE '' THEN STOP 
</pre>
If there is no text, then it inserts
<pre>
   IF DBG. THEN INPUT WAIT ; IF WAIT NE '' THEN STOP
</pre>
DeBug Wait - like DeBug View but allows the programmer to stop the program.
<p>&nbsp;</p>

<b>DISPLAY</b> <i>text</i>
<p></p>
The <b>DISPLAY</b> command inserts after the current line -
<pre>
   DISPLAY text = 'text'
</pre>
This works exactly the same as the <b>CRT</b> command previously defined.
 Having two commands is handy to distinguish temporary or special purpose code.
<p>&nbsp;</p>

<b>I</b>{<i>n</i>} {<i>text</i>}
<p></p>
The <b>I</b> (insert) command inserts text after the current line, making the new line the current line.
 There must be a delimiter before text. Any additional delimeters are treated as part of the inserted text.
 If a number is entered, that number of identical lines are generated.
<p></p>
If the <b>I</b> command is entered with no text after the <b>I</b>, the alternate editor enters input mode.
 It will prompt for successive lines until a null line is entered, at which point it returns to edit mode.
 Entering a line containing just a single <i>command delimiter</i> inserts a blank line.
<p>&nbsp;</p>


<b>LOAD</b> {{<i>filename</i>} <i>record.id</i>}
<p></p>
The <b>LOAD</b> command (short form <b>LD</b>) inserts part or all of the specified record into
 the record being edited after the current line position.
 If <i>filename</i> is omitted, it defaults to the file associated with the current record.
 If <i>filename</i> and <i>record.id</i> are both omitted, they will be prompted for.
<p></p>
The alternate editor will prompt for the start and end line numbers to be inserted.
 These default to the first and last lines respectively.
<p></p>
After the operation is complete, the current line is the last line of the newly inserted text.
<p>&nbsp;</p>


<b>LOADA</b> {{<i>filename</i>} <i>record.id</i>}
<p></p>
The <b>LOADA</b> (load all) command (short form <b>LDA</b>) operates just like like the
 <b>LOAD</b> command except that all the specified record is inserted,
 so it will not prompt for line numbers.

<p>&nbsp;</p>


<b><u>Deleting Lines</u></b>
<p>&nbsp;</p>

<b>DE</b>{<i>n</i>} {<i>string</i>}
<p></p>
The <b>DE<i>n</i></b> (delete) command deletes <i>n</i> lines starting at the current line position.
 If <i>n</i> is not specified, only the current line is deleted.
 The line after the last line deleted becomes the current line.
 If <i>string</i> is defined, then lines will be deleted only if the <i>string</i> is found in them.
<p>&nbsp;</p>

<b>CM</b>[<i>n</i>]/<i>pattern</i>/<b>D</b>
<p></p>
This version of the <b>CM</b> (changematch) command allows the user to search for and
delete one or more lines matching <i>pattern</i>.
The optional <i>n</i> component specifies that <i>n</i> lines starting
at the current line are to be pattern matched and possibly deleted.
Be aware that the CASE flag will influence the operation of this command.
<p>&nbsp;</p>

<b><u>Commands that Edit the Current Line</u></b>
<p>&nbsp;</p>


<b>A</b>{<i>n</i>} {<i>string</i>}
<p></p>
The <b>A</b> (append) command appends <i>string</i> to the current line.
 A delimiter must separate <i>string</i> from the command.
 Any further delimiters are treated as part of the inserted text.
 A <i>n</i> means that the <i>string</i> is appended to the next <i>n</i> lines.
<p></p>
If <i>string</i> is omitted, the most recent <b>A</b> command <i>string</i> is used.
<p>&nbsp;</p>

<b>B</b>{<i>n</i>} <i>string</i>
<p></p>
The <b>B</b> (Break) command splits one or more lines into two after <i>string</i>.
 The <i>string</i> argument must be present and is preceded by a single delimiter.
 Any additional delimiters are treated as part of <i>string</i>.
<p>&nbsp;</p>
<b>BC</b>{<i>n</i>} <i>column</i>
<p></p>
The <b>BC</b> (Break Column) command splits one or more lines into two after <i>column</i>.
 The <i>column</i> position must be within a line for it to be split.
<p>&nbsp;</p>

<b>BCD</b>{<i>n</i>} <i>column</i>
<p></p>
The <b>BCD</b> (Break Column Delete) command splits one or more lines into two after <i>column</i>
 and deletes the second part. The <i>column</i> position must be within a line for it to be split.
<p>&nbsp;</p>

<b>BCK</b>{<i>n</i>} <i>column</i>
<p></p>
The <b>BCK</b> (Break Column Keep) command splits one or more lines into two after <i>column</i>
 and deletes the first part, keeping the second part.
 The <i>column</i> position must be within a line for it to be split.
<p>&nbsp;</p>

<b>BCR</b>{<i>n</i>} <i>column</i>
<p></p>
The <b>BCR</b> (Break Column Reverse) command splits one or more lines into two after <i>column</i>
 and reverrses the order of the parts. The <i>column</i> position must be within a line for it to be split.
<p>&nbsp;</p>

<b>BCS</b>{<i>n</i>} <i>column</i>
<p></p>
The <b>BCS</b> (Break Column Swap) command splits one or more lines into three parts about <i>column</i>
 and swaps the first and third parts.  The character at position <i>column</i> remains as the centre part.
 The <i>column</i> position must be within a line for it to be split.
<p>&nbsp;</p>

<b>BD</b>{<i>n</i>} <i>string</i>
<p></p>
The <b>BD</b> (Break Delete) command splits one or more lines into two after <i>string</i>
 and deletes the second part.
 The <i>string</i> argument must be present and is preceded by a single delimiter.
 Any additional delimiters are treated as part of <i>string</i>.
<p>&nbsp;</p>

<b>BK</b>{<i>n</i>} <i>string</i>
<p></p>
The <b>BK</b> (Break Keep) command splits one or more lines into two after <i>string</i>
 and deletes the first part, keeping the second part.
 The <i>string</i> argument must be present and is preceded by a single delimiter.
 Any additional delimiters are treated as part of <i>string</i>.
<p>&nbsp;</p>

<b>BR</b>{<i>n</i>} <i>string</i>
<p></p>
The <b>BR</b> (Break Reverse) command splits one or more lines into two after <i>string</i>
 and reverrses the order of the parts.
 The <i>string</i> argument must be present and is preceded by a single delimiter.
 Any additional delimiters are treated as part of <i>string</i>.
<p>&nbsp;</p>

<b>BS</b>{<i>n</i>} <i>string</i>
<p></p>
The <b>BS</b> (Break Swap) command splits one or more lines into three parts about <i>string</i>
 and swaps the first and third parts.  The <i>string</i> remains as the centre part.
 The <i>string</i> argument must be present and is preceded by a single delimiter.
 Any additional delimiters are treated as part of <i>string</i>.
<p>&nbsp;</p>

<b>C</b>{<i>n</i>}/<i>old.string</i>/<i>new.string</i>/{<i>G</i>}{<i>S</i>}{<i>columns</i>}
<p></p>
The <b>C</b> (Change) command changes <i>old.string</i> to <i>new.string</i> in the current line.
 The delimiter around the strings may be any non-alphanumeric character.
The command can be restricted to a column range by specifying <i>columns</i> as a single number
 or as a range in the form start-end.
<p></p>

The optional <i>n</i> component specifies that <i>n</i> lines starting at the current line are to be changed.
<p></p>
<i>G</i> (Global) causes all occurrences of <i>old.string</i> to be replaced.
 Without G only the first occurrence on the line is changed.
<p></p>
<i>S</i> causes all change occurances to be displayed whatever the state of the SHOW flag.
 By default the SHOW flag is set off, which means that only one page of changes will be displayed.
<p></p>
Entering <b>C</b> with no strings repeats the last substitution.
<p>&nbsp;</p>

<b>CAT</b>{<i>n</i>} {<i>string</i>}
<p></p>
The <b>CAT</b> (conCATenate - synonym for <b>J</b>oin) command merges the current line,
 <i>string</i> and the following line to form a single line.
 Omitting <i>string</i> merges the lines with no intervening characters.
 There must be a single delimiter between the command and the <i>string</i>.
 Any additional delimiters are treated as part of string.
 The optional <i>n</i> allows a number of lines to be concatenated.
<p></p>
A subsequent <b>CAT</b> command by itself will join the current and next lines with the previous <i>string</i> used.
 The <i>string</i> can be set to nothing by entering a <b>CAT</b> followed by a delimiter only.
<p>&nbsp;</p>


<b>CM</b>[<i>n</i>]/<i>pattern</i>{/<i>range</i>/<i>string</i>}
<p></p>
The <b>CM</b> (changematch) command allows the user to search for one or
more lines matching <i>pattern</i> and, optionally, to change them.
Be aware that the CASE flag will influence the operation of this command.
A subsequent <b>CM</b> command on its own repeats the last search or change.
<p></p>
The optional line count specifies that <i>n</i> lines starting at the current line are to be
 <i>pattern</i> matched.
 Otherwise searches start at the next line and stop when a line is found,
 while changes work on the current line only.
<p></p>
NOTE: When the program is <b>NOT compiled with QM defined</b>, the pattern elements must be simple ones.
That is, tildes to imply "NOT matching" and ranges (for example, 1-4A or 2-7N) are not supported.
Also, where QM will allow 12A as one element, you would have to have 2 elements (like 9A3A).
If the program has to add quotes to make sense of the command entered, the modified command will be shown.
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<table>
<tr><td>Act </td> <td> Activity</td></tr>
<tr><td><b> L</b></td> <td> Search for a line matching <i>pattern</i> (default)</td></tr>
<tr><td><b> N</b></td> <td> Search for a line <u>not</u> matching <i>pattern</i></td></tr>
<tr><td><b> P</b></td> <td> Prefix <i>string</i> to a line matching <i>pattern</i></td></tr>
<tr><td><b> A</b></td> <td> Append <i>string</i> to a line matching <i>pattern</i></td></tr>
<tr><td><b> D</b></td> <td> Delete a line if it matches <i>pattern</i></td></tr>
<tr><td><b> R</b></td> <td> Replace a line matching <i>pattern</i> by <i>string</i></td></tr>
<tr><td><b> n</b></td> <td> Replace part of a line matching <i>pattern</i> element by <i>string</i></td></tr>
<tr><td><b>  </b></td> <td> E.G. In  3X1N2A0X "2" refers to the "1N" part, or the fourth character only</td></tr>
<tr><td><b> n-m</b></td> <td> Replace multiple parts of a line matching <i>pattern</i> elements by <i>string</i></td></tr>
<tr><td><b>  </b></td> <td> E.G. In  3X1N2A0X "2-3" refers to the "1N2A" parts, or the fourth to sixth characters inclusively</td></tr>
<tr><td><b> In</b></td> <td> Insert <i>string</i> before <i>nth</i> part of a line matching <i>pattern</i></td></tr>
<tr><td><b> nI</b></td> <td> Insert <i>string</i> after <i>nth</i> part of a line matching <i>pattern</i></td></tr>
<tr><td> </td><td><hr/></td></tr>
<tr><td><b>  </b></td> <td> The following arithmetic acts are only applied when they can be</td></tr>
<tr><td><b> +</b></td> <td> When a line matches <i>pattern</i> add <i>string</i> to it</td></tr>
<tr><td><b> -</b></td> <td> When a line matches <i>pattern</i> take <i>string</i> from it</td></tr>
<tr><td><b> *</b></td> <td> When a line matches <i>pattern</i> multiply it by <i>string</i></td></tr>
<tr><td><b> /</b></td> <td> When a line matches <i>pattern</i> divide it by <i>string</i></td></tr>
</table>
</p>
<p>&nbsp;</p>


<b>DUP</b>{<i>n</i>}
<p></p>
The <b>DUP</b> (DUPlicate) command duplicates the current line <i>n</i> times.
 The value of <i>n</i> defaults to one. The current line is unchanged.
<p>&nbsp;</p>


<b>FOLD</b> {<i>length</i>}
<p></p>
The <b>FOLD</b> command breaks the current line (on spaces if possible) to fit in <i>length</i>.
 The value of <i>length</i> defaults to the terminal page width.
<p>&nbsp;</p>


<b>IC</b>{<i>n</i>} <i>conv</i>
<p></p>
The <b>IC</b> command does an internal conversion on <i>n</i> lines (default 1) starting
 at the current line using the conversion <i>conv</i>.
<p>&nbsp;</p>


<b>IN</b> <i>command</i>
<p></p>
The <b>IN</b> command inserts the results of the TCL <i>command</i> after the current line.
 It is not a good idea to use a command requiring terminal entry,
 as the terminal output is being captured and can't be seen.
 That is to say, THIS IS A DANGEROUS COMMAND.
<p>&nbsp;</p>


<b>J</b>{<i>n</i>} {<i>string</i>}
<p></p>
The <b>J</b> (Join - synonym for <b>CAT</b>) command merges the current line,
 <i>string</i> and the following line to form a single line.
 Omitting <i>string</i> merges the lines with no intervening characters.
 There must be a single delimiter between the command and the <i>string</i>.
 Any additional delimiters are treated as part of string.
 The optional <i>n</i> allows a number of lines to be concatenated.
<p></p>
A subsequent <b>J</b> command by itself will join the current and next lines with the previous <i>string</i> used.
 The <i>string</i> can be set to nothing by entering a <b>J</b> followed by a delimiter only.
<p>&nbsp;</p>


<b>LC</b>{<b>F</b>}{<i>n</i>}
<p></p>
The <b>LC</b> command converts <i>n</i> lines (default 1) starting at the current line to lower case.
 Unless the <b>F</b>orce option is present,
 then anything within quote marks and any comment line is <u>not</u> converted.
<p>&nbsp;</p>


<b>MERGE</b>{<i>n</i>} {<i>s</i>} {<i>e</i>}
<p></p>
The <b>MERGE</b> command (short form <b>ME</b>) copies the predefined block or,
 if specified, other lines in the item to after the current line.  The line numbers are:
<p></p>
     <i>n</i> for the number of lines to copy.
<br> <i>s</i> the start line number of the block to copy.
<br> <i>e</i> the end line number of the block to copy.
<p>&nbsp;</p>


<b>MOVE</b>{<i>n</i>} {<i>s</i>} {<i>e</i>}
<p></p>
The <b>MOVE</b> command (short form <b>MV</b>) moves the predefined block or,
 if specified, other lines in the item to after the current line.  The line numbers are:
<p></p>
     <i>n</i> for the number of lines to move.
<br> <i>s</i> the start line number of the block to move.
<br> <i>e</i> the end line number of the block to move.
<p>&nbsp;</p>


<b>OC</b>{<i>n</i>} <i>conv</i>
<p></p>
The <b>OC</b> command does an output conversion on <i>n</i> lines (default 1)
 starting at the current line using the conversion <i>conv</i>.
<p>&nbsp;</p>


<b>R</b>{<i>n</i>} {<i>string</i>}
<p></p>
The <b>R</b> (Replace) command on its own will replace the current line with prompted for text.
 If there is a <i>string</i> then it will replace the current line with it.
 If a line number <i>n</i> is given as well as <i>string</i>,
 then the next <i>n</i> lines will be replaced with <i>string</i>.
 This is the default command interpretation if a space is the delimiter.
<p>&nbsp;</p>


<b>R</b>{<i>n</i>}/<i>old.string</i>/<i>new.string</i>/{<i>G</i>}{<i>S</i>}{<i>columns</i>}
<p></p>
This usage is identical to the <b>C</b> command previously described.
 It is not used if the delimiter is a space.
 This command usage matches other multivalue implementations.
<p>&nbsp;</p>


<b>RA</b>{<i>n</i>}
<p></p>
The <b>RA</b> (Replace Again) command on its own will display a page of up to 20 of the last change commands.
 If a line number <i>n</i> is given, the <i>n</i>th change command will be repeated and moved to the top of the change stack.
 This command usage is an evolution of what is done in other multivalue implementations.
<p>&nbsp;</p>


<b>SEQ</b>{<i>n</i>} <i>string</i> {<i>base</i>} {<i>increment</i>} {<i>columns</i>}
<p></p>
The <b>SEQ</b> command will convert <i>string</i> to an incrementing number over the next <i>n</i> lines.
 The numbers start at <i>base</i> and increase by <i>increment</i> for each new line.
 Both of these figures default to 1.
The command can be restricted to a column range by specifying <i>columns</i> as
 a single number or as a range in the form start-end.
<p>&nbsp;</p>


<b>STAMP</b>
<p></p>
The <b>STAMP</b> command inserts a single comment line below the current line indicating the user name,
 account name, time and date of the modification. The line looks like this.
<p></p>
* Last updated by USER in account QMSYS at 15:01:30 10 FEB 2030
<p>&nbsp;</p>


<b>TC</b>{<b>F</b>}{<i>n</i>}
<p></p>
The <b>TC</b> command converts <i>n</i> lines (default 1) starting at the current line to Text case.
 Unless the <b>F</b>orce option is present,
 then anything within quote marks and any comment line is <u>not</u> converted.
<p>&nbsp;</p>


<b>TRIM</b>{<i>n</i>} {<i>character</i>} {<i>argument</i>}
<p></p>
The <b>TRIM</b> command trims redundant spaces from the next <i>n</i> lines (default 1).
 If a <i>character</i> is specified, then this is trimmed rather than a space.
If an <i>argument</i> is given, it must be one of the TRIM function arguments.
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<table width="85%" border="0" cellspacing="0" cellpadding="5">
<tr valign="top"><td> A </td><td>-</td><td> Remove all occurrences of character. </td></tr>
<tr valign="top"><td> B </td><td>-</td><td> Remove all leading and trailing occurrences of character. </td></tr>
<tr valign="top"><td> C </td><td>-</td><td> Replace multiple instances of character with a single character.</td></tr>
<tr valign="top"><td> D </td><td>-</td><td> Remove all leading and trailing spaces, replacing multiple embedded spaces with a single space.  The value of character is ignored.</td></tr>
<tr valign="top"><td> E </td><td>-</td><td> Remove all trailing spaces.  The value of character is ignored. </td></tr>
<tr valign="top"><td> F </td><td>-</td><td> Remove all leading spaces.  The value of character is ignored.</td></tr>
<tr valign="top"><td> L </td><td>-</td><td> Remove all leading occurrences of character. </td></tr>
<tr valign="top"><td> R </td><td>-</td><td> Remove all leading and trailing occurrences of character, replacing multiple embedded instances of character with a single character.</td></tr>
<tr valign="top"><td> T </td><td>-</td><td> Remove all trailing occurrences of character.</td></tr>
</table>
</p>
<p>&nbsp;</p>


<b>TRIMB</b>{<i>n</i>}
<p></p>
The <b>TRIMB</b> command trims spaces from the back of the next <i>n</i> lines (default 1).
<p>&nbsp;</p>


<b>TRIMF</b>{<i>n</i>}
<p></p>
The <b>TRIMF</b> command trims spaces from the front of the next <i>n</i> lines (default 1).
<p>&nbsp;</p>


<b>TRIPLE</b>{<i>n</i>} {<i>string</i>}
<p></p>
The <b>TRIPLE</b> command makes three copies of the current line
 (delimited by <i>string</i> if that is given), and puts this back as the current line.
 If <i>n</i> is given, it does this to the next <i>n</i> lines.
 This is useful to the application programmer as the following command sequence shows.
<pre>
   TRIPLE \
   R// open '
   R/\/' to /
   R/\/.file else error<-1> = 'cannot open file "/
   A "'
</pre>
which will turn the line
<pre>
   customer
</pre>
into the line
<pre>
   open 'customer' to customer.file else error<-1> = 'cannot open file "customer"'
</pre>
If the above commands were stored using <b>MACRO</b>,
 they could be repeated on other lines using the <b>PR</b>estored command.
 Further, if a function key was set to the prestored command using <b>UK</b>,
 then we have a really powerful ability with a single keypress.
 For example, consider the following commands:
<p></p>
&nbsp;PR1^TRIPLE \^R// open '^R/\/' to /^R/\/.file else error<-1> = 'cannot open file "/^A "'
<br>
&nbsp;UK5 PR1
<p></p>
 Which means that pressing &lt;F5&gt; would convert a line which was just a file name to a line of
 code opening a file and having an alternative if the opening didn't work. 
<p>&nbsp;</p>

<b>TWIN</b>{<i>n</i>} {<i>string</i>}
<p></p>
The <b>TWIN</b> command is just like the <b>TRIPLE</b> command, but only makes two copies of the current line.
<p>&nbsp;</p>

<b>UC</b>{<b>F</b>}{<i>n</i>}
<p></p>
The <b>UC</b> command converts <i>n</i> lines (default 1) starting at the current line to UPPER case.
 Unless the <b>F</b>orce option is present,
 then anything within quote marks and any comment line is <u>not</u> converted.
<p>&nbsp;</p>


<b><u>Buffer commands</u></b>
<p></p>
This alternate editor uses a concept called "Kept Buffers" which work similar to the clipboard
 used in other systems.
There are 9 buffers, if no number is given, buffer 1 is usually assumed.
If number 0 is used, this can refer to all 9 buffers.
<p>&nbsp;</p>


<b>CLEAR</b>{<i>b</i>}
<p></p>
The <b>CLEAR</b> command removes everything in kept buffer <i>b</i> (default 1) - 0 clears all kept buffers.
<p>&nbsp;</p>


<b>COPY</b>{<i>b</i>} {<i>n</i>}|{<i>s</i> <i>e</i>}
<p></p>
The <b>COPY</b> command copies the predefined block or, if specified,
 other lines in the item to a kept buffer.  The line numbers are:
<p></p>
    &nbsp; <i>n</i> for the number of lines to copy, starting at the current line.
<br>&nbsp; <i>s</i> the start line number of the block to copy.
<br>&nbsp; <i>e</i> the end line number of the block to copy.
<p></p>
NOTE: This command is different from the one used in the standard <b>ED</b> editor.
 That editor uses the command to copy the predefined block after the current line
 in the same way as this editor would do with a <b>MERGE</b> command,
 or by doing a <b>COPY</b> followed by a <b>PASTE</b>.
<p>&nbsp;</p>


<b>CUT</b>{<i>b</i>} {<i>n</i>}|{<i>s</i> <i>e</i>}
<p></p>
The <b>CUT</b> command moves the predefined block or, if specified,
 other lines in the item to a kept buffer.  The line numbers are:
<p></p>
    &nbsp; <i>n</i> for the number of lines to move, starting at the current line.
<br>&nbsp; <i>s</i> the start line number of the block to move.
<br>&nbsp; <i>e</i> the end line number of the block to move.
<p>&nbsp;</p>


<b>KEEP</b>{<i>b</i>} {{<i>filename</i>} <i>record.id</i>}
<p></p>
The <b>KEEP</b> command puts part or all of the specified record into the kept buffer.
 If <i>filename</i> is omitted, it defaults to the file associated with the current record.
 If <i>filename</i> and <i>record.id</i> are both omitted, they will be prompted for.
<p></p>
The alternate editor will prompt for the start and end line numbers to be put in the buffer.
 These default to the first and last lines respectively.
<p>&nbsp;</p>


<b>KEEPA</b>{<i>b</i>} {{<i>filename</i>} <i>record.id</i>}
<p></p>
The <b>KEEPA</b> (keep all) command works just like <b>KEEP</b> but puts all the specified
 record into the kept buffer without prompting for line numbers.
<p>&nbsp;</p>


<b>KEPT</b>{<i>b</i>}
<p></p>
The <b>KEPT</b> command (short form <b>K</b>) displays a kept buffer.
 If no buffer or buffer 0 is used, brief information on all the active buffers is given.
<p>&nbsp;</p>


<b>PASTE</b>{<i>b</i>}
<p></p>
The <b>PASTE</b> command inserts the contents of a kept buffer immediately after
 the current line. The default kept buffer is 1.
<p>&nbsp;</p>


<b>PASTE</b>{<i>b</i>} {<i>filename</i>} <i>record.id</i>
<p></p>
This form of the <b>PASTE</b> command saves a kept buffer to another file or another record in this file.
 The user is prompted for  confirmation if this would overwrite existing data.
<p>&nbsp;</p>

<b><u>Extended Editing</u></b>
<p></p>
The alternate editor has the ability to edit the current line or aspects of the current session in a diffferent way.
It does this by copying data to a scratch area in the file AE_COMS and executing another edit session.
The user can nest these sessions as required.
 For example, edit values in the current line, then edit sub-values within one of those values.
This is very useful, but it can become confusing, The <b>?</b> command will show the level the program is at.
<p></p>
The kept buffers are held in named common, so they can be used to transfer data between these edit sessions.
Other things (various flags, prestored commands, search stack, command stack, etc)
 are also held in named common but are saved when an edit session is exited
and refreshed when an edit session is started.  One consequence of this is that you can search in a number of
successive included sections for something that you never searched for in the mainline program.
<p></p>
The following extended editing commands exist:
<p>&nbsp;</p>

<b>EC</b>
<p></p>
Edit a called subroutine where the call is on the current line.
If the subroutine is not in the current file, the VOC is checked.
<p>&nbsp;</p>

<b>ECS</b>
<p></p>
Edit the command stack.
<p>&nbsp;</p>

<b>EF</b><b>n</b>
<p></p>
Edit the current line, splitting fields delimited by CHAR(<b>n</b>) into lines.
<p>&nbsp;</p>

<b>EI</b>
<p></p>
Edit included code.
The $include must be on the current line and if the include file is not specified,
 the current file or the file SYSCOM are used as default.
<p>&nbsp;</p>

<b>EIT</b>
<p></p>
Edit the current line as an I-type.
 This only works on the second line of an I-type dictionary item.
 Without this, complex I-types can become very difficut to maintain.
 This is not just a simple split on semi-colons (as these can appear in trans() statements)
 - rather, it is a logical split which allows the user to see the '@' variables
 explicitly, and thus make use of them.
<p>&nbsp;</p>

<b>EK</b>{<i>b</i>}
<p></p>
Edit a kept buffer (default 1).
<p>&nbsp;</p>

<b>EPR</b>{<i>n</i>}
<p></p>
Edit the prestored commands.
 If <i>n</i> is given, then only that prestored command is edited.
 Otherwise, all are, but in a slightly different format.
<p>&nbsp;</p>

<b>ESS</b>
<p></p>
Edit the Search Stack.
<p>&nbsp;</p>

<b>ESV</b>
<p></p>
Edit the current line, splitting sub-values into separate lines.
<p>&nbsp;</p>

<b>ET</b>
<p></p>
Edit the tags set as separate line.  Only the first two 'words' on each line have meaning.
 The first must be an integer to define the tagged line.
 The second is a tag label, which must start with a letter.
<p>&nbsp;</p>

<b>EV</b>
<p></p>
Edit the current line, splitting values into separate lines.
<p>&nbsp;</p>

<b>EW</b>
<p></p>
Edit the current line, splitting words into separate lines.
 The word marker defaults to a space, but can be changed to any other
 non-alphanumeric printable character using the <b>WM</b> command.
 Note that the <b>EF</b> command is very similar,
 but also allows control characters to be used as word markers.
<p>&nbsp;</p>


<b><u>Block Edit Commands</u></b>
<p></p>
Blocks are defined by two pointers; the start and end line.
 Block operations enable the entire block to be deleted, copied, moved, or sorted.
<p>&nbsp;</p>

<b>&lt;</b>{<i>n</i>}
<p></p>
Sets line <i>n</i> to be the start line of the block.  The default is the current line.
<p>&nbsp;</p>

<b>&gt;</b>{<i>n</i>}
<p></p>
Sets line <i>n</i> to be the end line of the block.  The default is the current line.
<p>&nbsp;</p>

<b>&lt;&gt;</b>{<i>n</i>} {<i>e</i>}
<p></p>
Sets line <i>n</i> to be the start and end line of the block.
 The default is the current line.
 If <i>e</i> is also present, then that is the end line of the block.
 If this is done at the top of the page or using zero,
 in effect the block becomes undefined.
<p>&nbsp;</p>

<b>BLOCK</b>
<p></p>
Toggles block verification mode. When enabled, DROP, MERGE, MOVE and SORT commands
 cause a prompt for confirmation prior to performing the operation.
 The editor will also prompt when escaping the page edit mode if changes have been made.
 Block verification mode is enabled by default.
<p>&nbsp;</p>


<b>DROP</b>
<p></p>
Deletes the currently defined block.
<p>&nbsp;</p>

<b>MERGE</b>
<p></p>
The <b>MERGE</b> command (Short form <b>ME</b>) copies the currently defined block to immediately after the current line position
 without affecting the original block.
<p>&nbsp;</p>


<b>MOVE</b>
<p></p>
The <b>MOVE</b> command (Short form <b>MO</b>) Copies the currently defined block to immediately after the current line position
 and deletes the original block.
<p>&nbsp;</p>

<b>QSORT</b> {<i>sequence</i>}
<p></p>
The <b>QSORT</b> command (Short form <b>QS</b>) Sorts the currently defined block using the QM subroutine !SUB.
This can be spectaculaly better than <b>SORT</b>, or it can be slower - experimentation is advised.
If the <i>sequence</i> is not given, it defaults to "AL".
If the case flag is <b>OFF</b> then "C" is added to the sequence.
As per the documentation of !SORT, which you should read, <i>sequence</i> can include any
of "ACDFLNRUX" and invalid or conflicting elements are ignored.
<p>&nbsp;</p>


<b>SORT</b>{<b>U</b>} {<i>sequence</i>}
<p></p>
Sorts the currently defined block.
If the <i>sequence</i> is not given, it defaults to "AL".
Valid sequences are "AL", "AR", "DL" and "DR".
The <b>SORTU</b> variant means only unique lines are kept.
<p>&nbsp;</p>


<b><u>File Handling Commands and Leaving the Editor</u></b>
<p>&nbsp;</p>



<b>EXIT</b>
<p></p>
The <b>EXIT</b> command (short form <b>EX</b>) exits the record being edited.
 A confirmation prompt is issued if there are unsaved changes.
 If a select list is being used, it moves to the next record in the list.
 <b>QUIT</b> and <b>Q</b> are synonyms for this command.
<p>&nbsp;</p>

<b>EXITK</b>
<p></p>
The <b>EXITK</b> command (Exit Kill - short form <b>EXK</b>) exits the record being edited.
 A confirmation prompt is issued if there are unsaved changes.
 If a select list is being used,
 it ignores the remaining record ids and prompts for a new id.
 <b>QUITK</b>, <b>QK</b> and <b>X</b> are synonyms for this command.
<p>&nbsp;</p>


<b>FD</b>
<p></p>
Prompts for confirmation and then deletes the entire record from the file.
<p></p>
After the record has been deleted, the editor either terminates,
 continues with the next record from a select list or
 prompts for a new record id depending on the way in which it was entered.
<p>&nbsp;</p>

<b>FILE</b> {{<i>DICT</i>} {<i>filename</i>} <i>record.id</i>}
<p></p>
The <b>FILE</b> command (short form <b>FI</b>) with no arguments writes
 the record being edited back to its file.
<p></p>
If <i>record.id</i> is specified, the modified record is saved under the new name.
 A confirmation prompt will be issued if a record of this name already exists.
<p></p>
If both <i>filename</i> and <i>record.id</i> are given, the record is saved to
 the specified file and record.
 Again, a confirmation prompt will be issued if a record of this name already exists.
<p></p>
After the record has been saved, the editor either terminates, continues
 with the next record from a select list or prompts for a new record id
 depending on the way in which it was entered.
<p></p>
A number of extended forms of the FI command are available for use when editing QMBasic programs:
<p></p>

<b>FIB</b> {{<i>filename</i>} <i>record.id</i>} Files the record and then runs the QMBasic compiler.
<p></p>

<b>FIBC</b> {{<i>filename</i>} <i>record.id</i>} Files the record,
 runs the QMBasic compiler, and then catalogs the program.
<p></p>

<b>FIBCL</b> {{<i>filename</i>} <i>record.id</i>} Files the record,
 runs the QMBasic compiler, and then catalogs the program locally.
<p></p>

<b>FIBR</b> {{<i>filename</i>} <i>record.id</i>} Files the record,
 runs the QMBasic compiler, and then runs the program.
<p></p>

Note that <b>B C L R</b> may appear in any order after the <b>FI</b> command
 but there must be no gaps.
 The operations will always be carried out in the order compile, catalog, run.
 There is no checking of the success of an operation.
<p>&nbsp;</p>



<b>FORMAT</b> {{<i>-Mn</i>} {<i>-In</i>} {<i>-A</i>} {<i>-N</i>} | -C}
<p></p>
The <b>FORMAT</b> command (short form <b>FOR</b>) formats a QMBasic program
to show  logical structure by indenting.
<p style="margin: 0px 0px 0px 30px;">
<table cellpadding="5">
<tr><td><i>-Mn</i></td><td>sets the <i>Margin</i> to <i>n</i> spaces.</td></tr>
<tr><td><i>-In</i></td><td>sets the <i>Indentation</i> to <i>n</i> spaces.</td></tr>
<tr><td><i>-A</i></td><td><i>Aligns</i> comment with code.</td></tr>
<tr><td><i>-N</i></td><td><i>No</i> indentation for CASE statements.</td></tr>
<tr><td><i>-C</i></td><td><i>Compresses</i> the code - same as '-M0 -I1 -A -N'.</td></tr>
</table></p>
NOTE: This is the only command that changes things that still works when the
 program acts as a viewer.
 This is because it is a programmers editor, and anything that assists a programmer
 to understand a program is important.

 The other change commands are disabled so no-one ends up doing a lot of work and then
 discovering - 'twas all in vain, it can't be saved!
<p>&nbsp;</p>



<b>QUIT</b>
<p></p>
The <b>QUIT</b> command (short form <b>Q</b>) exits the record being edited.
 A confirmation prompt is issued if there are unsaved changes.
 If a select list is being used, it moves to the next record in the list.
 <b>EXIT</b> and <b>EX</b> are synonyms for this command.
<p>&nbsp;</p>

<b>QUITK</b>
<p></p>
The <b>QUITK</b> command (Quit Kill - short form <b>QK</b>) exits the record being edited.
 A confirmation prompt is issued if there are unsaved changes.
 If a select list is being used, it ignores the remaining record ids
 and prompts for a new id.
 <b>EXITK</b>, <b>EXK</b> and <b>X</b> are synonyms for this command.
<p>&nbsp;</p>


<b>SAVE</b> {{<i>DICT</i>} {<i>filename</i>} <i>record.id</i>}
<p></p>
If no arguments are included, the <b>SAVE</b> command writes the record
 being edited back to its file. <b>UNLOAD</b> is a synonym.
<p></p>
If record.id is specified, the modified record is saved under the new name.
 A confirmation prompt will be issued if a record of this name already exists.
<p></p>
If both filename and record.id are given, the record is saved
 to the specified file and record.
 Again, a confirmation prompt will be issued if a record of this name already exists.
<p></p>
Unlike the <b>FILE</b> command, editing continues after saving the record.
 The <b>SAVE</b> command does not change the names associated with the record being edited.
 A subsequent <b>SAVE</b> or <b>FILE</b> with the file and record names omitted
 will use the original names, not those of an intermediate <b>SAVE</b> command.
<p>&nbsp;</p>

<b>UNLOAD</b> {{<i>DICT</i>} {<i>filename</i>} <i>record.id</i>}
<p></p>
If no arguments are included, the <b>UNLOAD</b> command writes the record
 being edited back to its file. <b>SAVE</b> is a synonym.
<p></p>
If record.id is specified, the modified record is saved under the new name.
 A confirmation prompt will be issued if a record of this name already exists.
<p></p>
If both filename and record.id are given, the record is saved
 to the specified file and record.
 Again, a confirmation prompt will be issued if a record of this name already exists.
<p></p>
Unlike the <b>FILE</b> command, editing continues after saving the record.
 The <b>UNLOAD</b> command does not change the names associated with
 the record being edited.
 A subsequent <b>UNLOAD</b> or <b>FILE</b> with the file and record names omitted
 will use the original names, not those of an intermediate <b>UNLOAD</b> command.
<p>&nbsp;</p>

<b>X</b>
<p></p>
The <b>X</b> command exits the record being edited.
 A confirmation prompt is issued if there are unsaved changes.
 If a select list is being used, it ignores the remaining record ids and prompts for a new id.
 <b>EXITK</b>, <b>EXK</b>,  <b>QUITK</b> and <b>QK</b> are synonyms for this command.
<p>&nbsp;</p>

<b><u>Miscellaneous Commands</u></b>
<p>&nbsp;</p>

<b>?</b>
<p></p>
The <b>?</b> command displays status information about the editor and the record being edited.
 This includes
<p></p>
The users login name, terminal identifier, and user number.
<br>&nbsp;Account.
<br>&nbsp;The VOC path
<br>&nbsp;Execution level.
<br>&nbsp;File name
<br>&nbsp;Record id being edited.
<br>&nbsp;Current line number.
<br>&nbsp;Number of lines in the record.
<br>&nbsp;Number of characters in the record.
<br>&nbsp;Last change command used.
<br>&nbsp;Last change match command used.
<br>&nbsp;Last append command used
<br>&nbsp;Block start and end line positions.
<br>&nbsp;The command delimiter, character to end inserting, and word marker.
<br>&nbsp;Window page sizes.
<br>&nbsp;Non-printing character expansion mode status (^)
<br>&nbsp;The setting of the following flags:
<br>&nbsp;&nbsp;&nbsp;CASE - search case sensitivity
<br>&nbsp;&nbsp;&nbsp;SPACE - search spaces and tab sensitivity
<br>&nbsp;&nbsp;&nbsp;SHOW - display more than a page of changes
<br>&nbsp;&nbsp;&nbsp;BLOCK - block mode verify status
<br>&nbsp;&nbsp;&nbsp;BELL - bell status
<br>&nbsp;Whether OOPS can be used and what command it will reverse.
<p>&nbsp;</p>

<b>/</b><i>string</i>
<p></p>
The <b>/</b> command gets converted to <b>L</b>99999999/<i>string</i>.
 It's just a super fast way to search.
<p>&nbsp;</p>

<b>//</b><i>string</i>
<p></p>
The <b>//</b> command gets converted to <b>LW</b>99999999/<i>string</i>.
 A fast search which only shows working code.
<p>&nbsp;</p>


<b>|</b>
<p></p>

Toggles colouring of code.
<p>&nbsp;</p>


<b>^</b>
<p></p>

Toggles non-printing character expansion mode.
 When this mode is enabled, non-printing characters are displayed as
 ^nnn where nnn is the decimal character number.
<p>&nbsp;</p>


<b>{</b>
<p></p>

Sets the page movement to half page when in page edit mode.
<p>&nbsp;</p>


<b>}</b>
<p></p>

Sets the page movement to full page when in page edit mode.
<p>&nbsp;</p>


<b>BELL</b> {<i>ON</i>|<i>OFF</i>}
<p></p>
Switch audible warning on and off.
 If neither <i>ON</i> nor <i>OFF</i> is used, then toggle the bell.
<p>&nbsp;</p>


<b>CASE</b> {<i>ON</i>|<i>OFF</i>}
<p></p>
Switch CASE flag for <b>B...</b>, <b>C...</b>, <b>DE</b>, <b>F...</b>,
 <b>L...</b>, and <b>R</b> commands.
 If neither <i>ON</i> nor <i>OFF</i> is used, then toggle CASE flag.
 <i>OFF</i> means that the commands are not case sensitive.
<p>&nbsp;</p>


<b>CD</b>{<i>delimiter</i>}
<p></p>
The <b>CD</b> (command delimiter) command displays what the
 command delimiter is (default is the left quote `).
 This is the character used to input a blank line, and it is also
 the character used when <b>PR</b> is used to show the prestored commands.
 If a <i>delimiter</i> is given (any non-alphanumeric character)
 the command delimiter is changed to this.
<p>&nbsp;</p>


<b>COL</b>
<p></p>
Displays a column number ruler to aid alignment of inserted text
<p>&nbsp;</p>

<b>COUNT</b>{<i>n</i>} <i>string</i>
<p></p>
The <b>COUNT</b> command counts the number of occurrances of <i>string</i>
 in the next <i>n</i> lines.
 If <i>n</i> is not given, all lines to the end of the record are checked.
<p>&nbsp;</p>

<b>DTX</b> <i>integer</i>
<p></p>
The <b>DTX</b> command (decimal to hexadecimal) shows
 the hexadecimal equivalent of <i>integer</i>.
<p>&nbsp;</p>

<b>HELP</b> {<i>topic</i>}
<p></p>
The <b>HELP</b> command displays short descriptions of commands identified by <i>topic</i>.
 If <i>topic</i> is omitted, this command shows all the help descriptions.
 If the <i>topic</i> is "NEW" then only new commands will be shown.
 The F1 key also can be used to show help.
<p>&nbsp;</p>

<b>HOLD</b> {<i>topic</i>}
<p></p>
The <b>HOLD</b> command means that a second list is maintained
 that is retained when the AE editor is left.
 The AE editor always works with a list of items being edited - even if there is only one.
 Items can be dropped from or restored to this second list by the <b>YANK</b> command.
<p>&nbsp;</p>

<b>LL</b>{<i>n</i>} {<i>length</i>}
<p></p>
The <b>LL</b> (long line) command searches for long lines.
 If <i>n</i> is entered, that gives a range of lines to search.
 If <i>length</i> is entered, that gives a minimum length of line to search for.
 The default is the page width.
<p>&nbsp;</p>

<b>MACRO</b>(<i>n</i>}
<p></p>
The <b>MACRO</b> command begins storing entered commands
 to be kept as prestore command <i>n</i> (default 1).
 Repeating the <b>MACRO</b> command stops storage of the command input
 and transfer the commands to the correct prestore command number.
<p>&nbsp;</p>

<b>NULL</b><i>delimiter</i>
<p></p>
This changes the character used to end input mode.
 This is very useful when pasting in text with blank lines using OS commands,
 as these would otherwise switch the alternate editor to edit mode.
<p>&nbsp;</p>

<b>NUM</b>
<p></p>
This toggles whether line numbers are displayed or not in edit mode.
<p>&nbsp;</p>

<b>OOPS</b>
<p></p>
The <b>OOPS</b> command undoes the most recent function that modified the record.
 It cannot be used to forget positioning functions.
<p>&nbsp;</p>

<b>OUT</b> {<i>n</i>} {<i>CEPST*</i>}
<p></p>
The <b>OUT</b> command shows program outline (lines with GOTOs GOSUBs and labels)
 for the next <i>n</i> lines. The default is to the end of the program.
 <i>CEPST</i> are flags to include CALLs EXECUTEs PERFORMs CASE Statements and TAGged
 lines respectively - <i>*</i> means you want all of these.
<p>&nbsp;</p>

<b>PE</b>
<p></p>
The <b>PE</b> command (Page Edit) puts the alternate editor into a
 full page edit mode unless the D option is in effect.
 The F2 key also can be used to enter the page editor -
 it can be regarded as toggling between line and page modes.
<p>&nbsp;</p>

<b>PR</b>{<i>n</i>}{/<i>string</i>}
<p></p>
The <b>PR</b> command displays the prestored commands. If <i>n</i> is entered,
 that prestore command is carried out as a set of input commands.
 When making changes to a number of records,
 if the last two items in the prestore are <b>FI</b> and <b>PR<i>n</i></b>,
 then a lot of records cn be changed quickly.
 Care is needed in using this feature to avoid endlessly looping.
<p></p>
If both <i>n</i> and <i>string</i> exist, then <i>string</i>
 replaces the prestore command <i>n</i>.
 Whatever delimiter is used acts as the delimiter between commands in <i>string</i>.
<p>&nbsp;</p>

<b>RELEASE</b>
<p></p>
This releases the record lock on the item being edited.
 Once this has been done, the item cannot be saved or filed.
<p>&nbsp;</p>


<b>SHOW</b> {<i>ON</i>|<i>OFF</i>}
<p></p>
Switch SHOW flag for commands that change lines.
 If neither <i>ON</i> nor <i>OFF</i> is used, then toggle SHOW flag.
 <i>OFF</i> means that when commands change a number of lines,
 only one page of changes are displayed.  This is to minimise terminal display delay.
<p>&nbsp;</p>

<b>SPACE</b> {<i>ON</i>|<i>OFF</i>}
<p></p>
Switch SPACE flag for <b>L</b>, <b>LA</b>, <b>LN</b>, and <b>LNA</b> commands.
 If neither <i>ON</i> nor <i>OFF</i> is used, then toggle SPACE flag.
 <i>OFF</i> means that the commands ignore spaces and tabs.
<p>&nbsp;</p>

<b>SPOOL</b>{<i>n</i>}
<p></p>
The <b>SPOOL</b> command prints a copy of the record on the default printer.
 If changes have been made but not yet written to the file,
 the printed version includes these changes.
 The optional <i>n</i> specifies the number of lines to be printed starting at the current line.
 If this is omitted, the entire record is printed.
<p>&nbsp;</p>


<b>SPOOLHELP</b>
<p></p>
The <b>SPOOLHELP</b> command prints a copy of the help descriptions on the default printer.
<p>&nbsp;</p>

<b>SPOUT</b> {<i>n</i>} {<i>CEPST*</i>}
<p></p>
The <b>SPOUT</b> command prints program outline (lines with GOTOs GOSUBs and labels)
 for the next <i>n</i> lines. The default is to the end of the program.
 <i>CEPST</i> are flags to include CALLs EXECUTEs PERFORMs CASE Statements and
 TAGged lines respectively - <i>*</i> means you want all of these.
<p>&nbsp;</p>


<b>UK</b>{<i>n</i>}{/<i>string</i>}
<p></p>
The <b>UK</b> command displays the user defined keys F5 to F12.
If <i>n</i> is entered, that function key is defined as the string entered - even an empty one.
Only function keys 5 to 12 can be defined and they only work in edit mode
 when the command line is otherwise empty.
 This command will not work with the D option. 
<p>&nbsp;</p>


<b>V</b>
<p></p>
Shows the AE and QM version numbers and the QM licence number.
<p>&nbsp;</p>


<b>WHERE</b>
<p></p>
The <b>WHERE</b> command (short form <b>W</b>)
Shows the record id and file name. If a number of programs are being edited,
 it will show a [position/total] also.
<p>&nbsp;</p>


<b>WM</b>{<i>delimiter</i>}
<p></p>
The <b>WM</b> (word mark) command displays what the word mark is (default is a space).
 If a <i>delimiter</i> is given (any non-alphanumeric character) the word mark is changed to this.
<p>&nbsp;</p>


<b>XEQ</b> {<i>command</i>}
<p></p>
The <b>XEQ</b> command executes the specified <i>command</i> which
 may be any <i>command</i> valid at the command prompt.
 Upon completion of the command, there is an opportunity to enter further commands.
<b>!</b> is an alternative form of this command without that opportunity.
 As with the <b>ED</b> editor, the <i>command</i> may include any of the following
 items to substitute text into the command:
<table>
<tr><td>&nbsp;@FILE</td><td>The file name</td></tr>
<tr><td>&nbsp;@ID</td><td>The record id</td></tr>
<tr><td>&nbsp;@LINE</td><td>The text of the current line</td></tr>
<tr><td>&nbsp;@FM</td><td>A field mark (to separate multiple commands)</td></tr>
<tr><td>&nbsp;@VM</td><td>A value mark</td></tr>
<tr><td>&nbsp;@SM</td><td>A subvalue mark</td></tr>
</table>
<p>&nbsp;</p>

<b>XTD</b> <i>hexadecimal</i>
<p></p>
The <b>XTD</b> command (hexadecimal to decimal) shows the integer equivalent of <i>hexadecimal</i>.
<p>&nbsp;</p>

<b>YANK</b>
<p></p>
The <b>YANK</b> command (short form <b>Y</b>) will remove or restore the record id of the item being
 edited from any second list that will be retained as an active select list after
 leaving the Alternate Editor (see <b>HOLD</b> command above).
<p>&nbsp;</p>

<b>ZOOM</b> {<i>H</i>alf|<i>F</i>ull}
<p></p>
The <b>ZOOM</b> command (short form <b>Z</b>) sets the amount to move focus in page edit mode -
 <b>H</b>alf or <b>F</b>ull page.
 If neither <i>H</i> nor <i>F</i> is used, then toggle between these.
<p>&nbsp;</p>

<b><u>Prestored Edit Commands</u></b>
<p></p>
The way the alternate editor implements prestored commands is based on the
 original Pick line editor.  They are held in common memory and exist only
 for the duration of the user's login session.
 However, the editing extensions mean that users can save and restore sets
 of useful prestored commands.
 The way to do this is to use the <b>EPR</b> command to edit the prestore
 commands and then use <b>UNLOAD</b> and <b>LOAD</b> commands to
 save and restore the command set wherever desired.
<P></P>
The <b>MACRO</b> command allows the user to carry out a set of commands once
 and load them into a prestored command for later repeated use.
<p></p>
A prestored command can have another prestored command within it.
 The usual implementation of this is to change something in a record,
 file it and repeat for a set of records.
 In this case the prestored command (assume it's number 4) might look like
<pre>
   23`c/this/that`fi`pr4
</pre>
This gives power and flexibility, so it can be dangerous.
 A lot of records can be changed (read trashed) very quickly.
<p>&nbsp;</p>



<b><u>User Defined Editor Extensions</u></b>
<p></p>
The alternate editor implements user defined extensions
 where a command is preceded by a dollar sign.
 For example, if the user enters the command $CL,
 then the item $CL is looked for in file AE_XCOMS.
 The first line of this item should be a short description of the command.
 The second line of this item must be a program name ending in _AE.
 This must be a cataloged subroutine and it can do things to the record.
<p></p>
The command <b>$?</b>... will list the existing commands.
<p></p>
For example: if a program, CLEAN_AE, was required to remove any lines
 that start with the exclamation mark, it could be written like this.

<pre>
  subroutine clean (junk(1))
*
* removes comment lines starting with ! character
*
* dim junk(100)             ;* this is done within AE
  equ this to junk(1)       ;* the record being edited
  equ item to junk(2)       ;* the record id - reset after
  equ here to junk(3)       ;* the current line number - checked after
  equ x$cc to junk(11)      ;* stack of commands to be carried out
  equ comi to junk(13)      ;* the command as entered
  equ comd to junk(14)      ;* the command as implemented
  equ last to junk(15)      ;* number of lines in record - reset after
  equ comdmark to junk(19)  ;* the command delimiter
  equ wordmark to junk(20)  ;* the word delimiter
  equ fnam to junk(24)      ;* the file name - reset after
  equ xsep to junk(25)      ;* initially a space
*
  new = ''
  for i = 1 to last
    line = this&lt;i&gt;
    test = trim(line)[1,1]
    if test ne '!' then
      new&lt;-1&gt; = line
    end else
      if i lt here then here -= 1
    end
  next i
  this = new
  return

</pre>
The file name and record id are not taken back into the alternate editor
 as this could cause problems.
<p>&nbsp;</p>

<b><u>External Editor Processes</u></b>
<p></p>
The alternate editor implements External Editor Processes like ED does within QM.
External Editor Processes are set up in $ED.OPTIONS as lines where
the first word is "EXTERNAL", the second word is the catlogued
program name, and the rest of the line is one or more patterns to
call the catalogued program.
<p></p>
Considering the the previous example: a similar program CL could exist to do the same job
as CLEAN_ED.
<pre>
  subroutine cl (junk(1),error)
*
* removes comment lines starting with ! character
*
* dim junk(8)               ;* this is done within AE
  equ fnam to junk(1)       ;* the file name - not changed
  equ item to junk(2)       ;* the record id - not changed
  equ this to junk(3)       ;* the record being edited
  equ here to junk(4)       ;* the current line number - checked after
  equ beg  to junk(5)       ;* the block start
  equ fin  to junk(6)       ;* the block end
  equ ucom to junk(7)       ;* the command as entered in upper case
*
  new = ''
  last = dcount(this,@am)
  for i = 1 to last
    line = this&lt;i&gt;
    test = trim(line)[1,1]
    if test ne '!' then
      new&lt;-1&gt; = line
    end else
      if i lt here then here -= 1
    end
  next i
  this = new
  return

</pre>
Again, the file name and record id are not taken back into the alternate editor.
<p>&nbsp;</p>
<b><u>Merging User Extensions with External Processes</u></b>
<p></p>
It is possible to write subroutines that can be used with either mechanism.
One has to test for the error variable being passed and use assignments rather than equates.
<p></p>
The example:
<pre>
  subroutine CLEAR_AE (junk(1),error)
*
* removes comment lines starting with ! character
*
  if arg.present(error)
     then is = 'ED'
     else is = 'AE'

  if is eq 'ED' then
     fnam = junk(1)       ;* the file name - not changed
     item = junk(2)       ;* the record id - not changed
     this = junk(3)       ;* the record being edited
     here = junk(4)       ;* the current line number - checked after
     beg  = junk(5)       ;* the block start - checked after
     fin  = junk(6)       ;* the block end - checked after
     ucom = junk(7)       ;* the command as entered in upper case
  end else
     this = junk(1)       ;* the record being edited
     item = junk(2)       ;* the record id - reset after
     here = junk(3)       ;* the current line number - checked after
     x$cc = junk(11)      ;* stack of commands to be carried out
     comi = junk(13)      ;* the command as entered
     comd = junk(14)      ;* the command as implemented
     last = junk(15)      ;* number of lines in record - reset after
     comdmark = junk(19)  ;* the command delimiter
     wordmark = junk(20)  ;* the word delimiter
     fnam = junk(24)      ;* the file name - reset after
     xsep = junk(25)      ;* initially a space
  end

  new = ''
  last = dcount(this,@am)
  for i = 1 to last
    line = this&lt;i&gt;
    test = trim(line)[1,1]
    if test ne '!' then
      new&lt;-1&gt; = line
    end else
      if i lt here then here -= 1
    end
  next i

  if is eq 'ED'
     then junk(3) = new
     else junk(1) = new
  return
</pre>
<p>&nbsp;</p>

<b><u>Page Editing</u></b>
<p></p>
Within the alternate editor, there is a full page editor.
The direct commands available in the page editor are fairly limited,
 but the limitations are deliberate and designed to mean
 it can be used on as many systems and terminals as possible.
 Indirect commands are accessed using a command menu.
<p></p>
The commands are:
<pre>
Cursor movement keys

           UP = UP arrow or Ctrl-Z
         DOWN = DOWN arrow or Ctrl-J
         LEFT = LEFT arrow or Ctrl-U
        RIGHT = RIGHT arrow or Ctrl-F

Line movement keys

     LEFT END = Home or Ctrl-A
    RIGHT END = End or Ctrl-E
   GO TO LINE = Ctrl-G  (prompts for desired line)

 Page movement keys

     PREVIOUS = Page Up or Ctrl-P
         NEXT = Page Down or Ctrl-N
          TOP = Ctrl-Page Up or Ctrl-T
       BOTTOM = Ctrl-Page Down or Ctrl-B

Deleting keys

  DELETE CHAR = Delete or Ctrl-D
  DELETE LINE = Ctrl-Home or Ctrl-L
DELETE TO EOL = Ctrl-End or Ctrl-K

Special character keys

       Ctrl-] = Value Mark
       Ctrl-\ = Sub-value Mark

Other command keys

     Backspace is destructive
         Enter splits the line
        Insert toggles between the insert and overwrite modes
           Tab moves to the next word
       BackTab moves to the previous word (Ctrl-Tab in UNIX or Shift-Tab in Windows)
        Ctrl-W changes the case of the word under the cursor or the whole line
        Ctrl-X allows the user to enter TCL commands
            F1 gives help
            F3 Forward search
            F4 Reverse search
           F10 Command Menu
            F2 Returns to line editor mode WITH changes
           F12 Returns to line editor mode WITHOUT changes
 Esc or Ctrl-Q Returns WITHOUT changes (pause slightly after escape)
</pre>
Note: If the block verification flag is set and changes have been made,
 the user is prompted to confirm they want to abandon these.
<p></p>
Note: The DELETE TO EOL command will, if it is on a space, delete spaces until the next character.
 Thus deleting everything to the end of the line may take two key presses.
 Here, simplicity was traded for flexibility.
<p></p>
<table>
<tr><td>Note:</td><td>If mouse clicks are enabled, then</td></tr>
<tr><td></td><td>clicking the bottom line is like pressing the F1 key</td><tr>
<tr><td></td><td>clicking the top line is like pressing the F10 key</td><tr>
<tr><td></td><td>clicking in the body moves the cursor to that position</td><tr>
<tr><td></td><td>within the following menus, a highlighted option can be selected</td><tr>
<tr><td></td><td>or the menu help can be selected by clicking on the ?????? bar to the right of the options</td><tr>
</table>
<p></p>
The command menu accessed by the &lt;F10&gt; key has the following options and sub-menus:
<pre>
File Edit Search Label Go Buffer Code Tag < > [ ] \ | { }
or
File Edit Search Label Go Buffer Code Tag < > [ ] \ | { } ^

F = File Menu
E = Edit Menu
S = Seek Menu
L = Logic Menu
G = Go to command
B = Buffer Menu
C = Code Menu
T = Tag Menu
< = Set Block Start
> = Set Block End
[ = Go to last Tag
] = Go to next tag
\ = Set Tag
| = Toggle Colouring
{ = Half Page Move
} = Full Page Move
^ = Toggle mouse input - Only if mousing is possible
___________________________________________________________
Delete fIle Kill Load Print Quit Save Write       file menu

D = Delete - will prompt first
I = fIle - update item to disk and go to next one
K = Kill - force exit with no prompts
L = Load - prompts and loads after the current line
P = Print the current item
Q = Quit - will prompt if there are any changes
S = Save - will prompt where to save item
W = Write item to disk with no prompts
___________________________________________________________
Copy cuT Paste Duplicate Join mErge mOve Linemode edit menu

C = Copy text from item
T = Copy text, removing it from item
P = Paste text in item
D = Duplicate current line
J = Join lines - will prompt for number and inserted string
E = Merge text from current item
O = Move text within current item
L = Change to line mode input
___________________________________________________________
Back Forward Last Next Highlight                  seek menu

B = Find string above cursor - will prompt for string
F = Find string after cursor - will prompt for string
L = Find last search string above cursor - no prompt
N = Find next search string after cursor - no prompt
H = change last search string without a search
C = toggle case flag for search
___________________________________________________________
Back Forward Last Next                           logic menu

B = Find label BEFORE this one - will prompt for label
F = Find label FOLLOWING this one - will prompt for label
L = Find LAST search label before this one - no prompt
N = Find NEXT search label behind this one - no prompt
A = Find the line ABOVE this one matching it logically
M = Find the next line MATCHING this one logically

You can enter a pattern for the label prompt
___________________________________________________________
Oops Update Wipe                                buffer menu

O = Restore item to last checkpoint
U = Update checkpoint
W = Reset item to original state
___________________________________________________________
Basic Catalog Run Stamp Format                    code menu

B = Basic (compile) the item
C = Catalog the item
R = Run the item as a program
S = Insert a line giving user, account, time, and date
F = format the item - prompts for formatting parameters
___________________________________________________________
Last Next Set Remove Wipe Display Go               tag menu

L = Find last tag above cursor
N = Find next tag after cursor
S = Set a tag on this line
R = Remove any tag on this line
W = Wipe all tags
D = Display the tag information
G = Go to a specific tag - prompts for the tag
</pre>
<p></p>
NOTE that &lt;ESC&gt; will drop from any command menu to the page input mode,
 and that &lt;F1&gt; will show one of the above screens as help.
<p>&nbsp;</p>

<b><u>Command Stack Editing</u></b>
<p></p>

There are a number of 'dot' commands to edit the command stack.
<p></p>

<b>.A</b>{<i>n</i>} <i>string</i>
<br>&nbsp;&nbsp;&nbsp;
APPEND <i>string</i> to command <i>n</i> (default 1).
<p></p>

<b>.C</b>{<i>n</i>/<i>old.string</i>/<i>new.string</i>/{<i>G</i>}
<br>&nbsp;&nbsp;&nbsp;
CHANGE stack command <i>n</i> (default 1). Syntax is like <b>C</b> command.
<p></p>

<b>.D</b>{<i>n</i>}
<br>&nbsp;&nbsp;&nbsp;
DELETE stack command <i>n</i> (default 1).
<p></p>

<b>.I</b>{<i>n</i>]<i>string</i>
<br>&nbsp;&nbsp;&nbsp;
INSERT <i>string</i> at stack position <i>n</i> (default 1).
<p></p>

<b>.L</b>{<i>n</i>}
<br>&nbsp;&nbsp;&nbsp;
LIST on the Terminal the last <i>n</i> stack commands. The default is to list a single page of commnds.
<p></p>

<b>.R</b><i>n</i>
<br>&nbsp;&nbsp;&nbsp;
RECALL (copy) command <i>n</i> to stack position 1.
<p></p>

<b>.S</b>{<i>n</i>} {<i>s</i>} {<i>e</i>}
<br>&nbsp;&nbsp;&nbsp;
SAVE stack commands <i>s</i> to <i>e</i> as prestore <i>n</i> (all default to 1).
<p></p>

<b>.U</b>{<i>n</i>}
<br>&nbsp;&nbsp;&nbsp;
UPCASE stack command <i>n</i> (default 1).
<p></p>

<b>.UL</b>{<i>n</i>}
<br>&nbsp;&nbsp;&nbsp;
Lower case stack command <i>n</i> (default 1).
<p></p>

<b>.UT</b>{<i>n</i>}
<br>&nbsp;&nbsp;&nbsp;
Text case stack command <i>n</i> (default 1).
<p></p>

<b>.W</b>{<i>n</i>}
<br>&nbsp;&nbsp;&nbsp;
Wiggle case stack command <i>n</i> (default 1).
 The stack command will change case - lower to upper, upper to text or lower, text to lower.
 The command is redisplayed.
<p></p>

<b>.X</b>{<i>n</i>}
<br>&nbsp;&nbsp;&nbsp;
EXECUTE stack command <i>n</i> (default 1).
The command will be put in stack position 1.
<p></p>

Conversely, the up and down arrows will allow access to previous commands which can be edited directly.
In this circumstance, Esc or Ctrl-Q returns to the standard edit line.
The operation is, like the QM Command Line Editor,
 controlled by any option codes in field 3 of the VOC item $RELEASE.
<p></p>
Which are:
<p></p> 
&nbsp;&nbsp;&nbsp;&nbsp;<b>E</b>&nbsp;&nbsp;  Position the cursor at the end of a recalled command rather than the start.
<br> 
&nbsp;&nbsp;&nbsp;&nbsp;<b>O</b>&nbsp;&nbsp;  Start in overlay mode.
<br> 
&nbsp;&nbsp;&nbsp;&nbsp;<b>S</b>&nbsp;&nbsp;  Show the stack commands when moving back through the stack.
<br> 
&nbsp;&nbsp;&nbsp;&nbsp;<b>X</b>&nbsp;&nbsp;  Clear the recalled command if the first
 character typed is not a control code. This mode cannot be used with E.
<p>&nbsp;</p>



<b><u>Logic Tags</u></b>
<p></p>
When editing QMBasic programs, it is useful to be able to skip backwards and forwards
 to follow complex gosub logic trails.
 The alternate editor uses <b>\</b> to set tags and <b>[</b> and <b>]</b> to cruise tags
 backwards and forwards as decribed below.
Note that if a <b>SORT</b> or <b>QSORT</b> could affect <u>any</u> tag, then <u>all</u> tags are deleted.
<p></p>

<b>\</b>{<i>label</i>}
<br>&nbsp;&nbsp;&nbsp;
This sets a tag against the current line with the tag name <i>label</i>.
 If <i>label</i> is not given, a default is set up of "T" followed by the current line number.
<p></p>

<b>\\</b>
<br>&nbsp;&nbsp;&nbsp;
Clear all the tags.
<p></p>

<b>[</b>{<i>label</i>}
<br>&nbsp;&nbsp;&nbsp;
Go to the line indicated by the previous tag (a current tag pointer is kept).
 If <i>label</i> is given, go to the line indicated by that tag.
<p></p>

<b>]</b>{<i>label</i>}
<br>&nbsp;&nbsp;&nbsp;
Go to the line indicated by the next tag (a current tag pointer is kept).
 If <i>label</i> is given, go to the line indicated by that tag.
<p></p>

<b>[[</b> or <b>]]</b> or <b>[]</b> or <b>][</b>
<br>&nbsp;&nbsp;&nbsp;
Display the tag information.
<p>&nbsp;</p>


<b><u>Setting Default Modes and other Controls</u></b>
<p></p>
On entry, the <b>AE</b> editor looks for an X-type VOC record named $ED.OPTIONS.@LOGNAME
 where @LOGNAME is the uppercase version of the user name.
 Failing this it looks for $ED.OPTIONS.
 If one of these exists, fields 2 onwards of the record are examined for options
 that set the default modes for the alternate editor. These may be:
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>BELL</b> {<b>ON</b> | <b>OFF</b>} Turn on/off the audible warning. The default is ON.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>BLEACH</b> {<b>ON</b> | <b>OFF</b>} Turn off/on code colouring. The default is
 set by the file type
 for standard files the default is ON, that is, code colouring is OFF.
 For directory files, which <u>may</u> be source code files,
 the default is OFF, that is, code colouring is ON.
 The command may seem perverse, but since the code was provided by Brian Leach,
 it is certainly apt.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>BLOCK</b> {<b>ON</b> | <b>OFF</b>} Turn on/off prompting for confirmation on
 <b>DROP</b>, <b>MERGE</b>, <b>MOVE</b>, <b>SORT</b> and <b>SORTU</b> commands,
 and when abandoning page edit changes. The default is ON.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>CASE</b> {<b>ON</b> | <b>OFF</b>} Turn on/off case sensitivity for
 <b>B</b>... <b>C</b>... <b>DE</b> <b>F</b>... <b>L</b>... and <b>R</b> commands. The default is OFF.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>SHOW</b> {<b>ON</b> | <b>OFF</b>} Turn on/off the listing of all changes made.
 The default is OFF which means that only a page worth of changes is displayed
 unless otherwise specified in the command entered.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>SPACE</b> {<b>ON</b> | <b>OFF</b>} Turn on/off space and tab sensitivity for <b>L</b> commands.
 The default is ON.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>ZOOM</b> {<b>H</b> | <b>F</b>} Tells whether to move a half or full page when crossing the edge
 of the screen in page edit mode. The default is F (full).
</p>
<p></p>
The following are more controls than modes.
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>PAGE</b> &nbsp; &nbsp; If present, the <b>AE</b> editor defaults to page edit mode;
 otherwise it defaults to line edit mode. The command line (D) option will take precedence over this.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>INWORD</b> &nbsp; &nbsp; If present, the second 'word' on the line consists of characters
(apart for A-Z and a-z and 0-9) that will be assumed to be part of a word.
This is to allow things like email addresses or variable names to be 'seen' as one word.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>MOUSE</b> &nbsp; &nbsp; Followed by two words, <i>terminal</i> and <i>mouser</i>,
 to show is what type of terminal this covers and the code used to control and interpret the mouse actions.
This is usually limited to getting the left button click only.
</p>
<p></p>
<p style="margin: 0px 0px 0px 30px;">
There are six mousers defined. Note that the "click" must either be defined as "kmous" in the terminfo
 database (this is preferable) or set up using the BINDKEY function to action 200.
<br>
</p>
<table style="margin: 0px 0px 0px 30px;" cellspacing="5">
<tr><td>Mouser Type</td><td>click</td><td>on</td><td>off</td></tr>
<tr><td>ASCII</td><td>^Bp</td><td>\E^B1</td><td>\E^B0</td></tr>
<tr><td>ANSI</td><td>\E[101~</td><td>\E^B1</td><td>\E^B0</td></tr>
<tr><td>HOSTACCESS</td><td>^BMS\r</td><td>\E[=27;1h</td><td>\E[=27;0h</td></tr>
<tr><td>QMTERM</td><td></td><td>\E^B1</td><td>\E^B0</td></tr>
<tr><td>XTERM</td><td>\E[M</td><td>\E?1000h</td><td>\E?1000l</td></tr>
<tr><td>XTERM9</td><td>\E[M</td><td>\E?9h</td><td>\E?9l</td></tr>
</table>
NOTE: mouser XTERM will "click" on the release of any key.
This is because of a quirk of Asus eeepc where the clear page won't work properly when the mouse key is down.
The original code is left in place commented out if you want to change it back.
</p><p>
NOTE: mouser QMTERM will work for terminal type "qmterm" only from version 3.0-8 onwards.
</p><p>
NOTE: Within AE, KEYCODE() is used to get the mouse click (character 200).
The above table is given as information. 
<p></p>
NOTE: In page edit mode, it is sometimes useful to be able to use the mouse
to do things in the terminal emulator. It is possible to "turn off" the
mouse input to the editor using the <F10> main menu "^" toggle option.

<p></p>

Unrecognised options or qualifiers are ignored.
<p></p>

If any default is not forced by $ED.OPTIONS, then it will be set as specified only on the
 <u>first</u> use of <b>AE</b>.  Otherwise it stays as last set by the user. 
<p>&nbsp;</p>


<b><u>Setting Colours for BASIC Code</u></b>
<p></p>
This capability is based on the colourisation used in Brian Leach's full-screen editor Z.
On entry, <b>AE</b> looks for an X-type VOC record to define the colours to be used for BASIC programs.

The VOC record is sought by trying to read, in this order:
<p></p>
    &AE.COLOURS.@TERM.TYPE.@LOGNAME
<br>&AE.COLORS.@TERM.TYPE.@LOGNAME
<br>&AE.COLOURS.@TERM.TYPE
<br>&AE.COLORS.@TERM.TYPE
<br>&AE.COLOURS.@LOGNAME
<br>&AE.COLORS.@LOGNAME
<br>&AE.COLOURS
<br>&AE.COLORS
<p>@TERM.TYPE and @LOGNAME being replaced by the upper case versions of the terminal type and the user name.
For example, user George on a vt220 terminal could be defined by item &AE.COLOURS.VT220.GEORGE</p>
If a voc record <u>is</u> found then <b>AE</b> examines fields 2 onwards of this record for options
that set the colours used by the alternate editor. These are of the form:
<p></p>
<p style="margin: 0px 0px 0px 30px;">
<b>STYLE</b> {<b>foreground,background</b> | <b>code</b>}
<p></p>
STYLE is one of:
<p></p>
<table>
<tr><td><b>N</b>ORMAL    </td><td>The standard colours (This is the only required style)</td></tr>
<tr><td><b>C</b>OMMENT   </td><td>Lines that start with <b>*</b> or <b>!</b></td></tr>
<tr><td><b>D</b>IRECTIVE </td><td>Lines that start with <b>$</b> or <b>#</b></td></tr>
<tr><td><b>A</b>TCOMMENT </td><td>A comment line with <b>@@</b> on the line</td></tr>
<tr><td><b>K</b>EYWORD   </td><td>BASIC keywords (defined in MESSAGES 6315)&lt;2&gt;</td></tr>
<tr><td><b>F</b>UNCTION  </td><td>BASIC functions(defined in MESSAGES 6315)&lt;3&gt;</td></tr>
<tr><td><b>L</b>ABEL     </td><td>Numeric or alphanumeric labels ending with <b>:</b></td></tr>
<tr><td><b>O</b>PERATOR  </td><td>The space and any of <b>,[]()&lt;&gt;=+-/*:#!</b></td></tr>
<tr><td><b>S</b>ELECT    </td><td>Any block, or the last search string</td></tr>
<tr><td><b>Q</b>UOTED    </td><td>Quoted strings</td></tr>
<tr><td><b>B</b>IGGEST   </td><td>The maximum line length to colour</td></tr>
</table>

<p>Only the first letter of the style is required - or, indeed, looked at.</p>
<p>BIGGEST is different from the rest in that it <u>only</u> allows you to specify
 a code for the longest line to colour, as the colour process is noticeably slow for very long lines.
 A zero will specify no limit,
 an integer will specify the maximum length,
 an integer immediately followed by a P or W will specify the maximum length in page widths.
 Longer lines are not coloured at all, and the default is 2P</p>
<p>Regarding the other options, there are two types of definition.</p>
<p>With the first type, two integers are used (separated by a comma)
for the foreground and background colours respectively.
Colour integers can be from 0 to 15, being black to white,
although these can vary with the terminal or emulation used.
Experiment may be needed to get the best colours.  Here is one specific example that I use.
<p>
<pre>
001: X for ASUS eeepc linux (xterm 4.x.x) (xterm colours)
002: NORMAL    0,9 Black on White
003: COMMENT   2,9 Green on White
004: LABEL     0,3 Black on Cyan
005: SELECT    0,6 Black on Yellow
006: QUOTED    5,9 Maroon on White
007: KEYWORD   1,9 Blue on White
008: OPERATOR
009: FUNCTION  4,9 Red on White
010: DIRECTIVE 6,1 Yellow on Blue
011: ATCOMMENT 4,3
</pre>
<p>With the second type, letters are used to switch in and out the video attributes.
In some emulators (EG: HOSTACCESS), colours can't be specified directly, but can be defined
by manipulating the set up of the video attributes.
</p>
<p style="margin: 0px 0px 0px 30px;">
<table>
<tr><td>R = </td><td> Reverse video</td></tr>
<tr><td>F = </td><td> Flashing (blinking)</td></tr>
<tr><td>U = </td><td> underline</td></tr>
<tr><td>B = </td><td> Bold face</td></tr>
</table>
</p>
<p>
In this case, NORMAL would turn all the video attributes off. It might need to be -R-F-U-B to do this,
although in many emulators -R, -F and -B are the same and any will work as if all were used.
</p>
<p>When there are no colour definitions at all, or when there appears to be no NORMAL,
then SELECT and LABEL will default to reverse video,
and KEYWORDs and FUNCTIONs will default to underlined.
This corresponds with the following definition.</p>
<p>
<pre>
001: X
002: NORMAL   -R-F-U-B      (or, often) -R-U
003: SELECT   R
004: LABEL    R
005: KEYWORD  U
006: FUNCTION U
</pre>
The program does not check if you have been consistant in your styles, but it's a bad idea not to be.
<p></p>
The colouring can be turned on or off by the following command -
 an acknowledgement of the contribution of Brian Leach.
<p></p>
<b>BLEACH</b> {<b>ON</b> | <b>OFF</b>} Turn off/on colouring flag.
 BLEACH ON means that colouring is not done, BLEACH OFF means that colouring is done.
 BLEACH by itself will toggle the flag (<b>|</b> is an alternative).
</table>
</body>
</html>
